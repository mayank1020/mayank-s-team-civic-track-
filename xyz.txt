<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CivicTrack - Community Issue Reporting</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <style>
        /* All existing CSS styles remain the same */
        /* Custom CSS Variables */
        :root {
            --primary: #3498db;
            --primary-dark: #2980b9;
            --secondary: #2ecc71;
            --danger: #e74c3c;
            --warning: #f39c12;
            --light: #ecf0f1;
            --dark: #34495e;
            --gray: #95a5a6;
        }
        
        /* Base Styles */
        body {
            background-color: #f5f7fa;
            color: var(--dark);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 15px;
        }
        
        /* Header Styles */
        header {
            background-color: white;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 1000;
        }
        
        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
        }
        
        .logo {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .logo i {
            font-size: 24px;
            color: var(--primary);
        }
        
        .logo h1 {
            font-size: 20px;
            color: var(--primary-dark);
            margin: 0;
        }
        
        .user-menu {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .user-menu button {
            background: none;
            border: none;
            color: var(--dark);
            cursor: pointer;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 5px;
            padding: 6px 10px;
            border-radius: 4px;
            transition: background-color 0.3s;
        }
        
        .user-menu button:hover {
            background-color: var(--light);
        }
        
        .user-menu .user-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background-color: var(--primary);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }
        
        /* Main Content */
        .main-content {
            display: grid;
            grid-template-columns: 1fr;
            gap: 20px;
            margin-top: 20px;
        }
        
        /* Map Section */
        .map-section {
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        
        #map {
            height: 400px;
            width: 100%;
        }
        
        .map-controls {
            display: flex;
            flex-direction: column;
            padding: 15px;
            background-color: white;
            border-top: 1px solid var(--light);
            gap: 12px;
        }
        
        .location-search {
            display: flex;
            gap: 8px;
        }
        
        .location-search input {
            flex: 1;
            padding: 8px 12px;
            border: 1px solid var(--gray);
            border-radius: 4px;
            font-size: 14px;
        }
        
        .location-search button {
            padding: 8px 12px;
            background-color: var(--primary);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 5px;
            transition: background-color 0.3s;
        }
        
        .location-search button:hover {
            background-color: var(--primary-dark);
        }
        
        .location-info {
            display: flex;
            align-items: center;
            gap: 8px;
            color: var(--gray);
            font-size: 14px;
        }
        
        .location-info i {
            color: var(--primary);
        }
        
        .location-text {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
        
        .location-actions {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }
        
        .location-btn {
            padding: 6px 10px;
            background-color: var(--primary);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 5px;
            transition: background-color 0.3s;
        }
        
        .location-btn:hover {
            background-color: var(--primary-dark);
        }
        
        .location-btn.secondary {
            background-color: var(--gray);
        }
        
        .location-btn.secondary:hover {
            background-color: #7f8c8d;
        }
        
        .radius-selector {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 5px;
        }
        
        .radius-selector select {
            padding: 6px 10px;
            border: 1px solid var(--gray);
            border-radius: 4px;
            background-color: white;
            font-size: 14px;
        }
        
        /* Issues Section */
        .issues-section {
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        
        .issues-header {
            padding: 15px;
            background-color: var(--primary);
            color: white;
            font-weight: 600;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .issues-content {
            padding: 15px;
        }
        
        /* Sidebar */
        .sidebar {
            display: grid;
            grid-template-columns: 1fr;
            gap: 15px;
        }
        
        .card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            border: none;
        }
        
        .card-header {
            padding: 12px 15px;
            background-color: var(--primary);
            color: white;
            font-weight: 600;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border: none;
        }
        
        .card-body {
            padding: 15px;
        }
        
        /* Live Issues Feed */
        .live-issues-feed {
            max-height: 400px;
            overflow-y: auto;
        }
        
        .live-issue-item {
            padding: 12px;
            border-bottom: 1px solid var(--light);
            cursor: pointer;
            transition: background-color 0.2s;
            position: relative;
        }
        
        .live-issue-item:hover {
            background-color: rgba(52, 152, 219, 0.05);
        }
        
        .live-issue-item:last-child {
            border-bottom: none;
        }
        
        .live-issue-title {
            font-weight: 600;
            margin-bottom: 5px;
            color: var(--dark);
            font-size: 14px;
            line-height: 1.3;
        }
        
        .live-issue-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 12px;
            color: var(--gray);
            margin-bottom: 5px;
        }
        
        .live-issue-category {
            display: flex;
            align-items: center;
            gap: 4px;
        }
        
        .live-issue-distance {
            display: flex;
            align-items: center;
            gap: 4px;
            font-weight: 500;
            color: var(--primary);
        }
        
        .live-issue-status {
            display: inline-block;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 10px;
            font-weight: 600;
            color: white;
            text-transform: uppercase;
        }
        
        .status-reported {
            background-color: var(--primary);
        }
        
        .status-in-progress {
            background-color: var(--warning);
        }
        
        .status-resolved {
            background-color: var(--secondary);
        }
        
        .live-issue-time {
            font-size: 11px;
            color: var(--gray);
            margin-top: 3px;
        }
        
        .live-issue-pulse {
            position: absolute;
            top: 12px;
            right: 12px;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: var(--danger);
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% {
                transform: scale(0.95);
                box-shadow: 0 0 0 0 rgba(231, 76, 60, 0.7);
            }
            
            70% {
                transform: scale(1);
                box-shadow: 0 0 0 10px rgba(231, 76, 60, 0);
            }
            
            100% {
                transform: scale(0.95);
                box-shadow: 0 0 0 0 rgba(231, 76, 60, 0);
            }
        }
        
        .live-issue-new {
            background-color: rgba(52, 152, 219, 0.05);
            border-left: 3px solid var(--primary);
        }
        
        .live-issue-external {
            border-left: 3px solid var(--warning);
        }
        
        .live-issue-source {
            font-size: 10px;
            color: var(--gray);
            font-style: italic;
            margin-top: 2px;
        }
        
        /* External Sources Section */
        .external-sources {
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid var(--light);
        }
        
        .external-sources h6 {
            font-size: 14px;
            margin-bottom: 10px;
            color: var(--dark);
        }
        
        .external-source-link {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px;
            margin-bottom: 5px;
            background-color: var(--light);
            border-radius: 4px;
            text-decoration: none;
            color: var(--dark);
            font-size: 12px;
            transition: background-color 0.2s;
        }
        
        .external-source-link:hover {
            background-color: rgba(52, 152, 219, 0.1);
            color: var(--primary);
        }
        
        .external-source-link i {
            color: var(--primary);
        }
        
        /* Report Form */
        .report-form {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }
        
        .form-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }
        
        .form-group label {
            font-weight: 500;
            color: var(--dark);
            font-size: 14px;
        }
        
        .form-control {
            padding: 10px;
            border: 1px solid var(--gray);
            border-radius: 4px;
            font-size: 14px;
            transition: border-color 0.3s;
        }
        
        .form-control:focus {
            border-color: var(--primary);
            outline: none;
            box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
        }
        
        textarea.form-control {
            resize: vertical;
            min-height: 80px;
        }
        
        .category-selector {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
        }
        
        .category-option {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 10px;
            border: 1px solid var(--gray);
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .category-option:hover {
            background-color: var(--light);
        }
        
        .category-option.selected {
            background-color: rgba(52, 152, 219, 0.1);
            border-color: var(--primary);
        }
        
        .category-option input {
            display: none;
        }
        
        .photo-upload {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        
        .photo-preview {
            width: 70px;
            height: 70px;
            border-radius: 4px;
            background-color: var(--light);
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
        }
        
        .photo-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .photo-preview .remove-photo {
            position: absolute;
            top: 5px;
            right: 5px;
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            border: none;
            border-radius: 50%;
            width: 18px;
            height: 18px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 12px;
        }
        
        .add-photo-btn {
            width: 70px;
            height: 70px;
            border: 2px dashed var(--gray);
            border-radius: 4px;
            background-color: transparent;
            color: var(--gray);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: border-color 0.3s;
        }
        
        .add-photo-btn:hover {
            border-color: var(--primary);
            color: var(--primary);
        }
        
        .add-photo-btn i {
            font-size: 18px;
            margin-bottom: 2px;
        }
        
        .add-photo-btn span {
            font-size: 10px;
        }
        
        .anonymous-toggle {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .toggle-switch {
            position: relative;
            width: 46px;
            height: 22px;
            background-color: var(--gray);
            border-radius: 11px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .toggle-switch.active {
            background-color: var(--primary);
        }
        
        .toggle-slider {
            position: absolute;
            top: 2px;
            left: 2px;
            width: 18px;
            height: 18px;
            background-color: white;
            border-radius: 50%;
            transition: transform 0.3s;
        }
        
        .toggle-switch.active .toggle-slider {
            transform: translateX(24px);
        }
        
        .btn {
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.3s;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            font-size: 14px;
        }
        
        .btn-primary {
            background-color: var(--primary);
            color: white;
        }
        
        .btn-primary:hover {
            background-color: var(--primary-dark);
        }
        
        .btn-secondary {
            background-color: var(--gray);
            color: white;
        }
        
        .btn-secondary:hover {
            background-color: #7f8c8d;
        }
        
        .btn-info {
            background-color: #17a2b8;
            color: white;
        }
        
        .btn-info:hover {
            background-color: #138496;
        }
        
        .btn-block {
            width: 100%;
        }
        
        /* Issues Grid - Updated for visual appeal */
        .issues-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }
        
        .issue-card {
            background-color: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            transition: transform 0.3s, box-shadow 0.3s;
            cursor: pointer;
            position: relative;
            border: none;
        }
        
        .issue-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.12);
        }
        
        .issue-image {
            height: 180px;
            width: 100%;
            overflow: hidden;
            position: relative;
        }
        
        .issue-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s;
        }
        
        .issue-card:hover .issue-image img {
            transform: scale(1.05);
        }
        
        .issue-status-badge {
            position: absolute;
            top: 12px;
            right: 12px;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            color: white;
            backdrop-filter: blur(5px);
        }
        
        .status-reported {
            background-color: rgba(52, 152, 219, 0.9);
        }
        
        .status-in-progress {
            background-color: rgba(243, 156, 18, 0.9);
        }
        
        .status-resolved {
            background-color: rgba(46, 204, 113, 0.9);
        }
        
        .issue-content {
            padding: 16px;
        }
        
        .issue-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--dark);
            margin-bottom: 10px;
            line-height: 1.3;
        }
        
        .issue-description {
            font-size: 14px;
            color: var(--gray);
            margin-bottom: 12px;
            line-height: 1.4;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }
        
        .issue-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-top: 12px;
            border-top: 1px solid var(--light);
        }
        
        .issue-category {
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 13px;
            color: var(--primary);
            font-weight: 500;
        }
        
        .issue-category i {
            font-size: 14px;
        }
        
        .issue-details {
            display: flex;
            align-items: center;
            gap: 12px;
            font-size: 12px;
            color: var(--gray);
        }
        
        .issue-distance {
            display: flex;
            align-items: center;
            gap: 4px;
        }
        
        .issue-reporter {
            display: flex;
            align-items: center;
            gap: 4px;
        }
        
        .issue-card.roads {
            border-top: 4px solid #3498db;
        }
        
        .issue-card.lighting {
            border-top: 4px solid #f39c12;
        }
        
        .issue-card.water {
            border-top: 4px solid #3498db;
        }
        
        .issue-card.cleanliness {
            border-top: 4px solid #2ecc71;
        }
        
        .issue-card.safety {
            border-top: 4px solid #e74c3c;
        }
        
        .issue-card.obstructions {
            border-top: 4px solid #9b59b6;
        }
        
        /* Filters - Updated to match screenshot */
        .filters {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid var(--light);
        }
        
        .filter-btn {
            padding: 6px 12px;
            background-color: white;
            border: 1px solid var(--gray);
            border-radius: 20px;
            font-size: 13px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
            transition: all 0.2s;
        }
        
        .filter-btn:hover {
            background-color: var(--light);
        }
        
        .filter-btn.active {
            background-color: var(--primary);
            color: white;
            border-color: var(--primary);
        }
        
        .filter-btn i {
            font-size: 12px;
        }
        
        /* No issues message */
        .no-issues {
            text-align: center;
            padding: 40px 20px;
            color: var(--gray);
        }
        
        .no-issues i {
            font-size: 48px;
            margin-bottom: 15px;
            color: var(--light);
        }
        
        .no-issues h3 {
            font-size: 18px;
            margin-bottom: 8px;
            color: var(--dark);
        }
        
        .no-issues p {
            font-size: 14px;
        }
        
        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 2000;
            align-items: center;
            justify-content: center;
            padding: 15px;
        }
        
        .modal.active {
            display: flex;
        }
        
        .modal-content {
            background-color: white;
            border-radius: 8px;
            width: 100%;
            max-width: 500px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }
        
        .modal-header {
            padding: 15px;
            border-bottom: 1px solid var(--light);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .modal-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--dark);
        }
        
        .modal-close {
            background: none;
            border: none;
            font-size: 20px;
            color: var(--gray);
            cursor: pointer;
        }
        
        .modal-body {
            padding: 15px;
        }
        
        .modal-footer {
            padding: 15px;
            border-top: 1px solid var(--light);
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }
        
        /* Settings Form */
        .settings-form {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        
        .settings-section {
            border-bottom: 1px solid var(--light);
            padding-bottom: 15px;
        }
        
        .settings-section:last-child {
            border-bottom: none;
            padding-bottom: 0;
        }
        
        .settings-section h4 {
            margin-bottom: 10px;
            color: var(--dark);
            font-size: 16px;
        }
        
        .setting-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
        }
        
        .setting-item:last-child {
            margin-bottom: 0;
        }
        
        .setting-label {
            font-size: 14px;
            color: var(--dark);
        }
        
        /* Login/Signup Form */
        .auth-form {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }
        
        .auth-tabs {
            display: flex;
            border-bottom: 1px solid var(--light);
        }
        
        .auth-tab {
            flex: 1;
            padding: 10px;
            text-align: center;
            cursor: pointer;
            border-bottom: 2px solid transparent;
            transition: border-color 0.3s;
            font-size: 14px;
        }
        
        .auth-tab.active {
            border-bottom-color: var(--primary);
            color: var(--primary);
        }
        
        .auth-content {
            padding: 15px 0;
        }
        
        .auth-panel {
            display: none;
        }
        
        .auth-panel.active {
            display: block;
        }
        
        /* Issue Detail Modal */
        .issue-detail {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        
        .issue-photos {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        
        .issue-photo {
            width: 100px;
            height: 100px;
            border-radius: 6px;
            overflow: hidden;
        }
        
        .issue-photo img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .issue-description {
            background-color: var(--light);
            padding: 12px;
            border-radius: 6px;
            font-size: 14px;
        }
        
        .issue-timeline {
            margin-top: 10px;
        }
        
        .timeline-item {
            display: flex;
            gap: 15px;
            margin-bottom: 15px;
            position: relative;
        }
        
        .timeline-item:not(:last-child):before {
            content: '';
            position: absolute;
            left: 15px;
            top: 30px;
            height: calc(100% - 15px);
            width: 2px;
            background-color: var(--light);
        }
        
        .timeline-icon {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background-color: var(--primary);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }
        
        .timeline-content {
            flex: 1;
        }
        
        .timeline-date {
            font-size: 12px;
            color: var(--gray);
        }
        
        .timeline-status {
            font-weight: 500;
            margin-top: 2px;
            font-size: 14px;
        }
        
        .timeline-note {
            margin-top: 5px;
            font-size: 13px;
            color: var(--dark);
        }
        
        .issue-actions {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 15px;
        }
        
        .btn-flag {
            background-color: var(--warning);
            color: white;
        }
        
        .btn-flag:hover {
            background-color: #d68910;
        }
        
        /* Admin Panel */
        .admin-panel {
            display: none;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 15px;
            margin-top: 15px;
        }
        
        .admin-header {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid var(--light);
        }
        
        .admin-header h2 {
            font-size: 18px;
            margin: 0;
        }
        
        .admin-tabs {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-bottom: 15px;
        }
        
        .admin-tab {
            padding: 8px 12px;
            background-color: var(--light);
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
            font-size: 14px;
        }
        
        .admin-tab.active {
            background-color: var(--primary);
            color: white;
        }
        
        .admin-content {
            display: none;
        }
        
        .admin-content.active {
            display: block;
        }
        
        .admin-stats {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .stat-card {
            background-color: var(--light);
            padding: 12px;
            border-radius: 6px;
            text-align: center;
        }
        
        .stat-value {
            font-size: 24px;
            font-weight: 700;
            color: var(--primary);
        }
        
        .stat-label {
            font-size: 12px;
            color: var(--gray);
            margin-top: 5px;
        }
        
        .admin-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
            font-size: 14px;
        }
        
        .admin-table th,
        .admin-table td {
            padding: 8px;
            text-align: left;
            border-bottom: 1px solid var(--light);
        }
        
        .admin-table th {
            background-color: var(--light);
            font-weight: 600;
        }
        
        .admin-actions {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
        }
        
        .btn-small {
            padding: 4px 6px;
            font-size: 12px;
        }
        
        .btn-danger {
            background-color: var(--danger);
            color: white;
        }
        
        .btn-danger:hover {
            background-color: #c0392b;
        }
        
        /* User Management */
        .user-search {
            display: flex;
            gap: 8px;
            margin-bottom: 12px;
        }
        
        .user-search input {
            flex: 1;
            padding: 8px;
            border: 1px solid var(--gray);
            border-radius: 4px;
            font-size: 14px;
        }
        
        .user-card {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px;
            border: 1px solid var(--light);
            border-radius: 6px;
            margin-bottom: 10px;
        }
        
        .user-avatar-large {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: var(--primary);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 16px;
        }
        
        .user-info {
            flex: 1;
        }
        
        .user-name {
            font-weight: 600;
            margin-bottom: 2px;
            font-size: 14px;
        }
        
        .user-email {
            font-size: 12px;
            color: var(--gray);
        }
        
        .user-status {
            font-size: 12px;
            color: var(--secondary);
        }
        
        .user-status.banned {
            color: var(--danger);
        }
        
        /* Notification */
        .notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: white;
            padding: 12px 15px;
            border-radius: 6px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            display: flex;
            align-items: center;
            gap: 10px;
            transform: translateY(100px);
            opacity: 0;
            transition: transform 0.3s, opacity 0.3s;
            z-index: 3000;
            max-width: 350px;
        }
        
        .notification.show {
            transform: translateY(0);
            opacity: 1;
        }
        
        .notification-icon {
            font-size: 18px;
        }
        
        .notification.success .notification-icon {
            color: var(--secondary);
        }
        
        .notification.error .notification-icon {
            color: var(--danger);
        }
        
        .notification.warning .notification-icon {
            color: var(--warning);
        }
        
        .notification.info .notification-icon {
            color: var(--primary);
        }
        
        .notification-content {
            flex: 1;
        }
        
        .notification-title {
            font-weight: 600;
            margin-bottom: 2px;
            font-size: 14px;
        }
        
        .notification-message {
            font-size: 13px;
            color: var(--gray);
        }
        
        .notification-close {
            background: none;
            border: none;
            color: var(--gray);
            cursor: pointer;
            font-size: 16px;
        }
        
        /* Location Permission Modal */
        .permission-modal {
            text-align: center;
        }
        
        .permission-icon {
            font-size: 48px;
            color: var(--primary);
            margin-bottom: 15px;
        }
        
        .permission-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 10px;
        }
        
        .permission-message {
            font-size: 14px;
            color: var(--gray);
            margin-bottom: 20px;
        }
        
        .permission-actions {
            display: flex;
            justify-content: center;
            gap: 10px;
        }
        
        /* Loading Spinner */
        .spinner {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        /* Dark mode styles */
        body.dark-mode {
            background-color: #1a1a1a;
            color: #e0e0e0;
        }
        
        body.dark-mode .card,
        body.dark-mode .modal-content,
        body.dark-mode .map-section,
        body.dark-mode .admin-panel,
        body.dark-mode .issues-section,
        body.dark-mode .issue-card {
            background-color: #2d2d2d;
            color: #e0e0e0;
        }
        
        body.dark-mode .card-header,
        body.dark-mode .issues-header {
            background-color: var(--primary-dark);
        }
        
        body.dark-mode .form-control,
        body.dark-mode .filter-group select,
        body.dark-mode .radius-selector select,
        body.dark-mode .location-search input,
        body.dark-mode .user-search input {
            background-color: #3d3d3d;
            color: #e0e0e0;
            border-color: #4d4d4d;
        }
        
        body.dark-mode .category-option,
        body.dark-mode .issue-card {
            border-color: #4d4d4d;
        }
        
        body.dark-mode .issue-meta {
            border-color: #4d4d4d;
        }
        
        body.dark-mode .stat-card,
        body.dark-mode .user-card {
            background-color: #3d3d3d;
        }
        
        body.dark-mode .admin-table th,
        body.dark-mode .admin-tabs,
        body.dark-mode .auth-tabs {
            background-color: #3d3d3d;
        }
        
        body.dark-mode .settings-section,
        body.dark-mode .modal-header,
        body.dark-mode .modal-footer {
            border-color: #4d4d4d;
        }
        
        body.dark-mode .filters {
            border-color: #4d4d4d;
        }
        
        /* Compact view styles */
        body.compact-view .card-header {
            padding: 8px 12px;
        }
        
        body.compact-view .card-body {
            padding: 10px 12px;
        }
        
        body.compact-view .issue-card {
            padding: 8px 10px;
        }
        
        body.compact-view .form-group {
            margin-bottom: 8px;
        }
        
        body.compact-view .btn {
            padding: 6px 10px;
        }
        
        /* Email Modal Styles */
        .email-modal {
            max-width: 600px;
        }
        
        .email-header {
            background-color: var(--primary);
            color: white;
            padding: 15px;
            border-radius: 8px 8px 0 0;
        }
        
        .email-body {
            padding: 20px;
            background-color: white;
        }
        
        .email-footer {
            padding: 15px;
            background-color: var(--light);
            border-radius: 0 0 8px 8px;
            font-size: 12px;
            color: var(--gray);
        }
        
        .email-content {
            line-height: 1.6;
        }
        
        .email-password {
            background-color: var(--light);
            padding: 10px;
            border-radius: 4px;
            font-family: monospace;
            font-size: 16px;
            text-align: center;
            margin: 15px 0;
        }
        
        .email-button {
            display: inline-block;
            background-color: var(--primary);
            color: white;
            padding: 10px 20px;
            border-radius: 4px;
            text-decoration: none;
            margin-top: 15px;
        }
        
        /* Responsive */
        @media (min-width: 768px) {
            .main-content {
                grid-template-columns: 1fr 350px;
            }
            
            .sidebar {
                grid-template-columns: 1fr;
            }
            
            #map {
                height: 500px;
            }
            
            .map-controls {
                flex-direction: row;
                justify-content: space-between;
                align-items: center;
            }
            
            .location-search {
                max-width: 400px;
            }
            
            .location-actions {
                justify-content: flex-end;
            }
            
            .admin-header {
                flex-direction: row;
                justify-content: space-between;
            }
            
            .issues-grid {
                grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            }
            
            .live-issues-feed {
                max-height: 500px;
            }
        }
        
        @media (min-width: 992px) {
            .container {
                padding: 0 20px;
            }
            
            .header-content {
                padding: 15px 0;
            }
            
            .logo i {
                font-size: 28px;
            }
            
            .logo h1 {
                font-size: 24px;
            }
            
            .user-menu button {
                font-size: 16px;
                padding: 8px 12px;
            }
            
            .user-menu .user-avatar {
                width: 36px;
                height: 36px;
            }
            
            .main-content {
                grid-template-columns: 1fr 400px;
                gap: 20px;
                margin-top: 20px;
            }
            
            .card-header {
                padding: 15px;
            }
            
            .card-body {
                padding: 15px;
            }
            
            .report-form {
                gap: 15px;
            }
            
            .form-group label {
                font-size: 14px;
            }
            
            .form-control {
                font-size: 14px;
            }
            
            .photo-preview {
                width: 80px;
                height: 80px;
            }
            
            .photo-preview .remove-photo {
                width: 20px;
                height: 20px;
                font-size: 12px;
            }
            
            .add-photo-btn {
                width: 80px;
                height: 80px;
            }
            
            .add-photo-btn i {
                font-size: 20px;
            }
            
            .add-photo-btn span {
                font-size: 12px;
            }
            
            .toggle-switch {
                width: 50px;
                height: 24px;
            }
            
            .toggle-switch.active .toggle-slider {
                transform: translateX(26px);
            }
            
            .btn {
                font-size: 14px;
            }
            
            .issues-grid {
                grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
            }
            
            .issue-image {
                height: 200px;
            }
            
            .issue-title {
                font-size: 18px;
            }
            
            .issue-description {
                font-size: 14px;
            }
            
            .filters {
                gap: 10px;
                margin-bottom: 20px;
            }
            
            .admin-panel {
                padding: 20px;
                margin-top: 20px;
            }
            
            .admin-header {
                margin-bottom: 20px;
                padding-bottom: 10px;
            }
            
            .admin-tabs {
                gap: 10px;
                margin-bottom: 20px;
            }
            
            .admin-tab {
                padding: 8px 15px;
            }
            
            .admin-stats {
                grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
                gap: 15px;
                margin-bottom: 20px;
            }
            
            .stat-card {
                padding: 15px;
            }
            
            .stat-value {
                font-size: 28px;
            }
            
            .stat-label {
                font-size: 14px;
            }
            
            .admin-table {
                font-size: 14px;
            }
            
            .admin-table th,
            .admin-table td {
                padding: 10px;
            }
            
            .btn-small {
                padding: 5px 8px;
                font-size: 12px;
            }
            
            .user-search {
                gap: 10px;
                margin-bottom: 15px;
            }
            
            .user-search input {
                font-size: 14px;
            }
            
            .user-card {
                padding: 15px;
                gap: 15px;
            }
            
            .user-avatar-large {
                width: 50px;
                height: 50px;
                font-size: 18px;
            }
            
            .user-name {
                font-size: 14px;
            }
            
            .user-email {
                font-size: 14px;
            }
            
            .user-status {
                font-size: 13px;
            }
            
            .settings-section h4 {
                font-size: 16px;
            }
            
            .setting-item {
                margin-bottom: 10px;
            }
            
            .setting-label {
                font-size: 14px;
            }
            
            .issue-photo {
                width: 120px;
                height: 120px;
            }
            
            .timeline-status {
                font-size: 14px;
            }
            
            .timeline-note {
                font-size: 14px;
            }
            
            .live-issues-feed {
                max-height: 600px;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header>
        <div class="container">
            <div class="header-content">
                <div class="logo">
                    <i class="fas fa-map-marked-alt"></i>
                    <h1>CivicTrack</h1>
                </div>
                <div class="user-menu">
                    <button id="settingsBtn" class="btn btn-sm btn-outline-secondary">
                        <i class="fas fa-cog"></i>
                        <span>Settings</span>
                    </button>
                    <button id="loginBtn" class="btn btn-sm btn-outline-primary">
                        <i class="fas fa-sign-in-alt"></i>
                        <span>Login</span>
                    </button>
                    <button id="signupBtn" class="btn btn-sm btn-primary">
                        <i class="fas fa-user-plus"></i>
                        <span>Sign Up</span>
                    </button>
                    <button id="adminBtn" class="btn btn-sm btn-warning" style="display: none;">
                        <i class="fas fa-user-shield"></i>
                        <span>Admin Panel</span>
                    </button>
                    <div class="user-avatar" id="userAvatar" style="display: none;">U</div>
                </div>
            </div>
        </div>
    </header>
    <!-- Main Content -->
    <div class="container">
        <div class="main-content">
            <!-- Main Column -->
            <div class="main-column">
                <!-- Map Section -->
                <div class="map-section card">
                    <div id="map"></div>
                    <div class="map-controls">
                        <div class="location-search">
                            <input type="text" id="locationSearch" class="form-control" placeholder="Search for a location...">
                            <button id="searchLocationBtn" class="btn btn-primary">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                        
                        <div class="location-info">
                            <i class="fas fa-map-marker-alt"></i>
                            <span class="location-text" id="locationText">Detecting your location...</span>
                        </div>
                        
                        <div class="location-actions">
                            <button class="location-btn btn btn-primary" id="refreshLocationBtn">
                                <i class="fas fa-sync-alt"></i>
                                Refresh
                            </button>
                            <button class="location-btn btn btn-secondary" id="manualLocationBtn">
                                <i class="fas fa-crosshairs"></i>
                                Set Manually
                            </button>
                        </div>
                        
                        <div class="radius-selector">
                            <label for="radiusSelect">Show issues within:</label>
                            <select id="radiusSelect" class="form-select">
                                <option value="1">1 km</option>
                                <option value="3" selected>3 km</option>
                                <option value="5">5 km</option>
                            </select>
                        </div>
                    </div>
                </div>
                
                <!-- Issues Section -->
                <div class="issues-section card">
                    <div class="issues-header">
                        <span>Community Issues</span>
                        <i class="fas fa-list"></i>
                    </div>
                    <div class="issues-content">
                        <div class="filters">
                            <button class="filter-btn active btn btn-sm btn-outline-primary" data-filter="all" data-type="status">
                                <i class="fas fa-list"></i>
                                All
                            </button>
                            <button class="filter-btn btn btn-sm btn-outline-primary" data-filter="reported" data-type="status">
                                <i class="fas fa-exclamation-circle"></i>
                                Reported
                            </button>
                            <button class="filter-btn btn btn-sm btn-outline-primary" data-filter="in-progress" data-type="status">
                                <i class="fas fa-tools"></i>
                                In Progress
                            </button>
                            <button class="filter-btn btn btn-sm btn-outline-primary" data-filter="resolved" data-type="status">
                                <i class="fas fa-check-circle"></i>
                                Resolved
                            </button>
                        </div>
                        <div class="filters">
                            <button class="filter-btn active btn btn-sm btn-outline-primary" data-filter="all" data-type="category">
                                <i class="fas fa-th-large"></i>
                                All Categories
                            </button>
                            <button class="filter-btn btn btn-sm btn-outline-primary" data-filter="roads" data-type="category">
                                <i class="fas fa-road"></i>
                                Roads
                            </button>
                            <button class="filter-btn btn btn-sm btn-outline-primary" data-filter="lighting" data-type="category">
                                <i class="fas fa-lightbulb"></i>
                                Lighting
                            </button>
                            <button class="filter-btn btn btn-sm btn-outline-primary" data-filter="cleanliness" data-type="category">
                                <i class="fas fa-trash"></i>
                                Cleanliness
                            </button>
                        </div>
                        <div class="filters">
                            <button class="filter-btn active btn btn-sm btn-outline-primary" data-filter="all" data-type="distance">
                                <i class="fas fa-map-marker-alt"></i>
                                Any Distance
                            </button>
                            <button class="filter-btn btn btn-sm btn-outline-primary" data-filter="1" data-type="distance">
                                <i class="fas fa-ruler"></i>
                                Within 1 km
                            </button>
                            <button class="filter-btn btn btn-sm btn-outline-primary" data-filter="3" data-type="distance">
                                <i class="fas fa-ruler"></i>
                                Within 3 km
                            </button>
                            <button class="filter-btn btn btn-sm btn-outline-primary" data-filter="5" data-type="distance">
                                <i class="fas fa-ruler"></i>
                                Within 5 km
                            </button>
                        </div>
                        <div class="issues-grid" id="issuesGrid">
                            <!-- Issues will be dynamically loaded here -->
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Sidebar -->
            <div class="sidebar">
                <!-- Live Issues Feed -->
                <div class="card">
                    <div class="card-header">
                        <span>Live Issues Near You</span>
                        <i class="fas fa-broadcast-tower"></i>
                    </div>
                    <div class="card-body">
                        <div class="live-issues-feed" id="liveIssuesFeed">
                            <!-- Live issues will be dynamically loaded here -->
                        </div>
                        <div class="text-center mt-2">
                            <button id="refreshLiveIssuesBtn" class="btn btn-sm btn-outline-primary">
                                <i class="fas fa-sync-alt"></i>
                                Refresh
                            </button>
                            <button id="fetchExternalBtn" class="btn btn-sm btn-info">
                                <i class="fas fa-external-link-alt"></i>
                                Fetch External
                            </button>
                        </div>
                        
                        <!-- External Sources Section -->
                        <div class="external-sources">
                            <h6>External Sources</h6>
                            <a href="https://www1.nyc.gov/311/index.page" target="_blank" class="external-source-link">
                                <i class="fas fa-external-link-alt"></i>
                                NYC 311 Service
                            </a>
                            <a href="https://www.chicago.gov/city/en/depts/311.html" target="_blank" class="external-source-link">
                                <i class="fas fa-external-link-alt"></i>
                                Chicago 311
                            </a>
                            <a href="https://seattle.gov/311" target="_blank" class="external-source-link">
                                <i class="fas fa-external-link-alt"></i>
                                Seattle 311
                            </a>
                            <a href="https://www.lacity.org/311" target="_blank" class="external-source-link">
                                <i class="fas fa-external-link-alt"></i>
                                LA 311
                            </a>
                            <a href="https://www.phila.gov/311" target="_blank" class="external-source-link">
                                <i class="fas fa-external-link-alt"></i>
                                Philadelphia 311
                            </a>
                            <a href="https://twitter.com/search?q=%23localissues&f=realtime" target="_blank" class="external-source-link">
                                <i class="fab fa-twitter"></i>
                                Twitter #localissues
                            </a>
                            <a href="https://www.reddit.com/r/localissues/" target="_blank" class="external-source-link">
                                <i class="fab fa-reddit"></i>
                                Reddit r/localissues
                            </a>
                        </div>
                    </div>
                </div>
                
                <!-- Report Issue Card -->
                <div class="card">
                    <div class="card-header">
                        <span>Report an Issue</span>
                        <i class="fas fa-exclamation-circle"></i>
                    </div>
                    <div class="card-body">
                        <form id="reportForm" class="report-form">
                            <div class="form-group">
                                <label for="issueTitle">Issue Title</label>
                                <input type="text" id="issueTitle" class="form-control" placeholder="Brief description of the issue" required>
                            </div>
                            
                            <div class="form-group">
                                <label>Category</label>
                                <div class="category-selector">
                                    <div class="category-option" data-category="roads">
                                        <input type="radio" name="category" value="roads" id="cat-roads">
                                        <i class="fas fa-road"></i>
                                        <span>Roads</span>
                                    </div>
                                    <div class="category-option" data-category="lighting">
                                        <input type="radio" name="category" value="lighting" id="cat-lighting">
                                        <i class="fas fa-lightbulb"></i>
                                        <span>Lighting</span>
                                    </div>
                                    <div class="category-option" data-category="water">
                                        <input type="radio" name="category" value="water" id="cat-water">
                                        <i class="fas fa-tint"></i>
                                        <span>Water</span>
                                    </div>
                                    <div class="category-option" data-category="cleanliness">
                                        <input type="radio" name="category" value="cleanliness" id="cat-cleanliness">
                                        <i class="fas fa-trash"></i>
                                        <span>Cleanliness</span>
                                    </div>
                                    <div class="category-option" data-category="safety">
                                        <input type="radio" name="category" value="safety" id="cat-safety">
                                        <i class="fas fa-hard-hat"></i>
                                        <span>Safety</span>
                                    </div>
                                    <div class="category-option" data-category="obstructions">
                                        <input type="radio" name="category" value="obstructions" id="cat-obstructions">
                                        <i class="fas fa-tree"></i>
                                        <span>Obstructions</span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label for="issueDescription">Description</label>
                                <textarea id="issueDescription" class="form-control" placeholder="Provide more details about the issue" required></textarea>
                            </div>
                            
                            <div class="form-group">
                                <label>Photos (up to 3)</label>
                                <div class="photo-upload">
                                    <div class="photo-preview" id="photoPreview1" style="display: none;">
                                        <img src="" alt="Issue photo">
                                        <button type="button" class="remove-photo" data-preview="1"><i class="fas fa-times"></i></button>
                                    </div>
                                    <div class="photo-preview" id="photoPreview2" style="display: none;">
                                        <img src="" alt="Issue photo">
                                        <button type="button" class="remove-photo" data-preview="2"><i class="fas fa-times"></i></button>
                                    </div>
                                    <div class="photo-preview" id="photoPreview3" style="display: none;">
                                        <img src="" alt="Issue photo">
                                        <button type="button" class="remove-photo" data-preview="3"><i class="fas fa-times"></i></button>
                                    </div>
                                    <button type="button" class="add-photo-btn" id="addPhotoBtn">
                                        <i class="fas fa-camera"></i>
                                        <span>Add Photo</span>
                                    </button>
                                    <input type="file" id="photoInput" accept="image/*" style="display: none;">
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <div class="anonymous-toggle">
                                    <span>Report Anonymously</span>
                                    <div class="toggle-switch" id="anonymousToggle">
                                        <div class="toggle-slider"></div>
                                    </div>
                                </div>
                            </div>
                            
                            <button type="submit" class="btn btn-primary btn-block">
                                <i class="fas fa-paper-plane"></i>
                                Submit Report
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Admin Panel -->
        <div class="admin-panel" id="adminPanel">
            <div class="admin-header">
                <h2>Admin Panel</h2>
                <button class="btn btn-primary" id="refreshDataBtn">
                    <i class="fas fa-sync-alt"></i>
                    Refresh Data
                </button>
            </div>
            
            <ul class="nav nav-tabs" id="adminTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="dashboard-tab" data-bs-toggle="tab" data-bs-target="#dashboard" type="button" role="tab" aria-controls="dashboard" aria-selected="true">Dashboard</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="issues-tab" data-bs-toggle="tab" data-bs-target="#issues" type="button" role="tab" aria-controls="issues" aria-selected="false">Issues</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="users-tab" data-bs-toggle="tab" data-bs-target="#users" type="button" role="tab" aria-controls="users" aria-selected="false">Users</button>
                </li>
            </ul>
            
            <div class="tab-content" id="adminTabContent">
                <!-- Dashboard Tab -->
                <div class="tab-pane fade show active" id="dashboard" role="tabpanel" aria-labelledby="dashboard-tab">
                    <div class="admin-stats">
                        <div class="stat-card">
                            <div class="stat-value" id="totalIssues">0</div>
                            <div class="stat-label">Total Issues</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="reportedIssues">0</div>
                            <div class="stat-label">Reported</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="inProgressIssues">0</div>
                            <div class="stat-label">In Progress</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="resolvedIssues">0</div>
                            <div class="stat-label">Resolved</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="flaggedIssues">0</div>
                            <div class="stat-label">Flagged</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="totalUsers">0</div>
                            <div class="stat-label">Total Users</div>
                        </div>
                    </div>
                </div>
                
                <!-- Issues Tab -->
                <div class="tab-pane fade" id="issues" role="tabpanel" aria-labelledby="issues-tab">
                    <h3>All Issues</h3>
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Title</th>
                                    <th>Category</th>
                                    <th>Status</th>
                                    <th>Reporter</th>
                                    <th>Flags</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="allIssuesTable">
                                <!-- All issues will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
                
                <!-- Users Tab -->
                <div class="tab-pane fade" id="users" role="tabpanel" aria-labelledby="users-tab">
                    <h3>User Management</h3>
                    <div class="user-search">
                        <input type="text" id="userSearchInput" class="form-control" placeholder="Search users...">
                        <button class="btn btn-primary" id="searchUserBtn">
                            <i class="fas fa-search"></i>
                            Search
                        </button>
                    </div>
                    <div id="usersList">
                        <!-- Users will be loaded here -->
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Location Permission Modal -->
    <div class="modal fade" id="permissionModal" tabindex="-1" aria-labelledby="permissionModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content permission-modal">
                <div class="modal-body">
                    <i class="fas fa-map-marker-alt permission-icon"></i>
                    <h3 class="permission-title">Location Access</h3>
                    <p class="permission-message">CivicTrack needs access to your location to show issues in your area. Please allow location access to continue.</p>
                    <div class="permission-actions">
                        <button class="btn btn-primary" id="allowLocationBtn">Allow Location Access</button>
                        <button class="btn btn-secondary" id="denyLocationBtn">Not Now</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Settings Modal -->
    <div class="modal fade" id="settingsModal" tabindex="-1" aria-labelledby="settingsModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="settingsModalLabel">Settings</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="settingsForm" class="settings-form">
                        <div class="settings-section">
                            <h4>Location Settings</h4>
                            <div class="setting-item">
                                <span class="setting-label">Default Radius</span>
                                <select id="defaultRadius" class="form-select" style="width: auto;">
                                    <option value="1">1 km</option>
                                    <option value="3" selected>3 km</option>
                                    <option value="5">5 km</option>
                                </select>
                            </div>
                            <div class="setting-item">
                                <span class="setting-label">Automatic Location</span>
                                <div class="toggle-switch active" id="autoLocationToggle">
                                    <div class="toggle-slider"></div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="settings-section">
                            <h4>Notification Settings</h4>
                            <div class="setting-item">
                                <span class="setting-label">Issue Updates</span>
                                <div class="toggle-switch active" id="issueUpdatesToggle">
                                    <div class="toggle-slider"></div>
                                </div>
                            </div>
                            <div class="setting-item">
                                <span class="setting-label">New Issues Nearby</span>
                                <div class="toggle-switch active" id="newIssuesToggle">
                                    <div class="toggle-slider"></div>
                                </div>
                            </div>
                            <div class="setting-item">
                                <span class="setting-label">Community Messages</span>
                                <div class="toggle-switch" id="communityMessagesToggle">
                                    <div class="toggle-slider"></div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="settings-section">
                            <h4>Display Settings</h4>
                            <div class="setting-item">
                                <span class="setting-label">Dark Mode</span>
                                <div class="toggle-switch" id="darkModeToggle">
                                    <div class="toggle-slider"></div>
                                </div>
                            </div>
                            <div class="setting-item">
                                <span class="setting-label">Compact View</span>
                                <div class="toggle-switch" id="compactViewToggle">
                                    <div class="toggle-slider"></div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="settings-section" id="changePasswordSection" style="display: none;">
                            <h4>Change Password</h4>
                            <div class="form-group">
                                <label for="currentPassword">Current Password</label>
                                <input type="password" class="form-control" id="currentPassword" placeholder="Enter current password">
                            </div>
                            <div class="form-group">
                                <label for="newPassword">New Password</label>
                                <input type="password" class="form-control" id="newPassword" placeholder="Enter new password">
                            </div>
                            <div class="form-group">
                                <label for="confirmNewPassword">Confirm New Password</label>
                                <input type="password" class="form-control" id="confirmNewPassword" placeholder="Confirm new password">
                            </div>
                            <button type="button" class="btn btn-primary" id="changePasswordBtn">
                                <i class="fas fa-key"></i>
                                Change Password
                            </button>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" id="cancelSettingsBtn">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveSettingsBtn">Save Settings</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Login/Signup Modal -->
    <div class="modal fade" id="authModal" tabindex="-1" aria-labelledby="authModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="authModalLabel">Welcome to CivicTrack</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <ul class="nav nav-tabs" id="authTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="login-tab" data-bs-toggle="tab" data-bs-target="#login" type="button" role="tab" aria-controls="login" aria-selected="true">Login</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="signup-tab" data-bs-toggle="tab" data-bs-target="#signup" type="button" role="tab" aria-controls="signup" aria-selected="false">Sign Up</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="forgot-tab" data-bs-toggle="tab" data-bs-target="#forgot" type="button" role="tab" aria-controls="forgot" aria-selected="false">Forgot Password</button>
                        </li>
                    </ul>
                    
                    <div class="tab-content" id="authTabContent">
                        <!-- Login Form -->
                        <div class="tab-pane fade show active" id="login" role="tabpanel" aria-labelledby="login-tab">
                            <form id="loginForm" class="auth-form mt-3">
                                <div class="mb-3">
                                    <label for="loginEmail" class="form-label">Email</label>
                                    <input type="email" class="form-control" id="loginEmail" placeholder="Enter your email" required>
                                </div>
                                <div class="mb-3">
                                    <label for="loginPassword" class="form-label">Password</label>
                                    <input type="password" class="form-control" id="loginPassword" placeholder="Enter your password" required>
                                </div>
                                <button type="submit" class="btn btn-primary w-100">
                                    <i class="fas fa-sign-in-alt"></i>
                                    Login
                                </button>
                            </form>
                        </div>
                        
                        <!-- Signup Form -->
                        <div class="tab-pane fade" id="signup" role="tabpanel" aria-labelledby="signup-tab">
                            <form id="signupForm" class="auth-form mt-3">
                                <div class="mb-3">
                                    <label for="signupName" class="form-label">Full Name</label>
                                    <input type="text" class="form-control" id="signupName" placeholder="Enter your full name" required>
                                </div>
                                <div class="mb-3">
                                    <label for="signupEmail" class="form-label">Email</label>
                                    <input type="email" class="form-control" id="signupEmail" placeholder="Enter your email" required>
                                </div>
                                <div class="mb-3">
                                    <label for="signupPassword" class="form-label">Password</label>
                                    <input type="password" class="form-control" id="signupPassword" placeholder="Create a password" required>
                                </div>
                                <div class="mb-3">
                                    <label for="signupConfirmPassword" class="form-label">Confirm Password</label>
                                    <input type="password" class="form-control" id="signupConfirmPassword" placeholder="Confirm your password" required>
                                </div>
                                <button type="submit" class="btn btn-primary w-100">
                                    <i class="fas fa-user-plus"></i>
                                    Sign Up
                                </button>
                            </form>
                        </div>
                        
                        <!-- Forgot Password Form -->
                        <div class="tab-pane fade" id="forgot" role="tabpanel" aria-labelledby="forgot-tab">
                            <form id="forgotForm" class="auth-form mt-3">
                                <div class="mb-3">
                                    <label for="forgotEmail" class="form-label">Email</label>
                                    <input type="email" class="form-control" id="forgotEmail" placeholder="Enter your email" required>
                                </div>
                                <button type="submit" class="btn btn-primary w-100">
                                    <i class="fas fa-key"></i>
                                    Reset Password
                                </button>
                            </form>
                            <div class="mt-3 text-center">
                                <p>Remember your password? <a href="#" class="text-primary" id="backToLoginLink">Back to Login</a></p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Issue Detail Modal -->
    <div class="modal fade" id="issueModal" tabindex="-1" aria-labelledby="issueModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="issueModalLabel">Issue Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="issue-detail" id="issueDetail">
                        <!-- Issue details will be loaded here -->
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Email Modal -->
    <div class="modal fade" id="emailModal" tabindex="-1" aria-labelledby="emailModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered email-modal">
            <div class="modal-content">
                <div class="email-header">
                    <h5 class="modal-title" id="emailModalLabel">Password Reset Email</h5>
                    <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="email-body">
                    <div class="email-content">
                        <p>Dear User,</p>
                        <p>We received a request to reset your password for your CivicTrack account.</p>
                        <p>Your temporary password is:</p>
                        <div class="email-password" id="emailPassword">password123</div>
                        <p>Please use this temporary password to log in to your account. We recommend changing your password immediately after logging in.</p>
                        <p>If you did not request a password reset, please ignore this email or contact our support team.</p>
                        <p>Thank you,<br>The CivicTrack Team</p>
                        <a href="#" class="email-button" id="emailLoginBtn">Go to Login</a>
                    </div>
                </div>
                <div class="email-footer">
                    <p>This is an automated message. Please do not reply to this email.</p>
                    <p>&copy; 2023 CivicTrack. All rights reserved.</p>
                </div>
            </div>
        </div>
    </div>
    <!-- Notification -->
    <div class="notification" id="notification">
        <div class="notification-icon">
            <i class="fas fa-check-circle"></i>
        </div>
        <div class="notification-content">
            <div class="notification-title">Success</div>
            <div class="notification-message">Your report has been submitted successfully.</div>
        </div>
        <button class="notification-close" id="notificationClose">&times;</button>
    </div>
    <!-- Scripts -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Initialize variables
        let map;
        let userLocation = null;
        let issues = [];
        let markers = [];
        let selectedCategory = null;
        let isAnonymous = false;
        let currentUser = null;
        let isAdmin = false;
        let photoCount = 0;
        let issueIdCounter = 1;
        let users = [];
        let currentAuthTab = 'login';
        let locationPermissionAsked = false;
        let settings = {
            defaultRadius: 3,
            autoLocation: true,
            notifications: {
                issueUpdates: true,
                newIssues: true,
                communityMessages: false
            },
            display: {
                darkMode: false,
                compactView: false
            }
        };
        let activeFilters = {
            status: 'all',
            category: 'all',
            distance: 'all'
        };
        let lastRenderedIssues = [];
        let liveIssuesUpdateInterval;
        let externalIssues = [];
        
        // DOM Elements
        const mapElement = document.getElementById('map');
        const locationText = document.getElementById('locationText');
        const radiusSelect = document.getElementById('radiusSelect');
        const locationSearch = document.getElementById('locationSearch');
        const searchLocationBtn = document.getElementById('searchLocationBtn');
        const refreshLocationBtn = document.getElementById('refreshLocationBtn');
        const manualLocationBtn = document.getElementById('manualLocationBtn');
        const reportForm = document.getElementById('reportForm');
        const issueTitle = document.getElementById('issueTitle');
        const issueDescription = document.getElementById('issueDescription');
        const anonymousToggle = document.getElementById('anonymousToggle');
        const addPhotoBtn = document.getElementById('addPhotoBtn');
        const photoInput = document.getElementById('photoInput');
        const issuesGrid = document.getElementById('issuesGrid');
        const issueModal = document.getElementById('issueModal');
        const modalClose = document.getElementById('modalClose');
        const modalTitle = document.getElementById('modalTitle');
        const issueDetail = document.getElementById('issueDetail');
        const notification = document.getElementById('notification');
        const notificationClose = document.getElementById('notificationClose');
        const loginBtn = document.getElementById('loginBtn');
        const signupBtn = document.getElementById('signupBtn');
        const adminBtn = document.getElementById('adminBtn');
        const userAvatar = document.getElementById('userAvatar');
        const adminPanel = document.getElementById('adminPanel');
        const refreshDataBtn = document.getElementById('refreshDataBtn');
        
        // Live Issues Feed Elements
        const liveIssuesFeed = document.getElementById('liveIssuesFeed');
        const refreshLiveIssuesBtn = document.getElementById('refreshLiveIssuesBtn');
        const fetchExternalBtn = document.getElementById('fetchExternalBtn');
        
        // Permission Modal Elements
        const permissionModal = document.getElementById('permissionModal');
        const allowLocationBtn = document.getElementById('allowLocationBtn');
        const denyLocationBtn = document.getElementById('denyLocationBtn');
        
        // Settings Modal Elements
        const settingsBtn = document.getElementById('settingsBtn');
        const settingsModal = document.getElementById('settingsModal');
        const settingsModalClose = document.getElementById('settingsModalClose');
        const settingsForm = document.getElementById('settingsForm');
        const cancelSettingsBtn = document.getElementById('cancelSettingsBtn');
        const saveSettingsBtn = document.getElementById('saveSettingsBtn');
        const defaultRadius = document.getElementById('defaultRadius');
        const autoLocationToggle = document.getElementById('autoLocationToggle');
        const issueUpdatesToggle = document.getElementById('issueUpdatesToggle');
        const newIssuesToggle = document.getElementById('newIssuesToggle');
        const communityMessagesToggle = document.getElementById('communityMessagesToggle');
        const darkModeToggle = document.getElementById('darkModeToggle');
        const compactViewToggle = document.getElementById('compactViewToggle');
        
        // Change Password Elements
        const changePasswordSection = document.getElementById('changePasswordSection');
        const currentPassword = document.getElementById('currentPassword');
        const newPassword = document.getElementById('newPassword');
        const confirmNewPassword = document.getElementById('confirmNewPassword');
        const changePasswordBtn = document.getElementById('changePasswordBtn');
        
        // Auth Modal Elements
        const authModal = document.getElementById('authModal');
        const authModalClose = document.getElementById('authModalClose');
        const authModalTitle = document.getElementById('authModalTitle');
        const authTabs = document.querySelectorAll('.auth-tab');
        const loginPanel = document.getElementById('loginPanel');
        const signupPanel = document.getElementById('signupPanel');
        const loginForm = document.getElementById('loginForm');
        const signupForm = document.getElementById('signupForm');
        const forgotForm = document.getElementById('forgotForm');
        const forgotEmail = document.getElementById('forgotEmail');
        const backToLoginLink = document.getElementById('backToLoginLink');
        
        // Email Modal Elements
        const emailModal = document.getElementById('emailModal');
        const emailPassword = document.getElementById('emailPassword');
        const emailLoginBtn = document.getElementById('emailLoginBtn');
        
        // Admin Panel Elements
        const adminTabs = document.querySelectorAll('.admin-tab');
        const dashboardTab = document.getElementById('dashboard-tab');
        const issuesTab = document.getElementById('issues-tab');
        const usersTab = document.getElementById('users-tab');
        const allIssuesTable = document.getElementById('allIssuesTable');
        const userSearchInput = document.getElementById('userSearchInput');
        const searchUserBtn = document.getElementById('searchUserBtn');
        const usersList = document.getElementById('usersList');
        
        // Filter buttons
        const filterBtns = document.querySelectorAll('.filter-btn');
        
        // Initialize the application
        function init() {
            // Initialize map
            map = L.map('map').setView([40.7128, -74.0060], 13);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);
            
            // Add a marker for the default location
            const defaultMarker = L.marker([40.7128, -74.0060]).addTo(map)
                .bindPopup('New York City')
                .openPopup();
            
            // Load data from localStorage
            loadDataFromStorage();
            
            // Apply settings
            applySettings();
            
            // Check if we need to ask for location permission
            if (settings.autoLocation && !locationPermissionAsked) {
                showLocationPermissionModal();
            } else if (settings.autoLocation) {
                getUserLocation();
            } else {
                locationText.textContent = 'Location detection disabled. Set location manually.';
                userLocation = { lat: 40.7128, lng: -74.0060 };
                filterIssuesByLocation();
                renderLiveIssues();
            }
            
            // Load sample data if no data exists
            if (issues.length === 0) {
                loadSampleData();
                saveDataToStorage();
            }
            
            // Setup event listeners
            setupEventListeners();
            
            // Render issues
            renderIssues();
            renderLiveIssues();
            
            // Start live issues update interval
            startLiveIssuesUpdateInterval();
        }
        
        // Start live issues update interval
        function startLiveIssuesUpdateInterval() {
            // Update live issues every 30 seconds
            liveIssuesUpdateInterval = setInterval(() => {
                if (userLocation) {
                    renderLiveIssues();
                }
            }, 30000);
        }
        
        // Load data from localStorage
        function loadDataFromStorage() {
            const storedIssues = localStorage.getItem('civictrack_issues');
            const storedUsers = localStorage.getItem('civictrack_users');
            const storedIssueIdCounter = localStorage.getItem('civictrack_issueIdCounter');
            const storedSettings = localStorage.getItem('civictrack_settings');
            const storedLocationPermissionAsked = localStorage.getItem('civictrack_locationPermissionAsked');
            
            if (storedIssues) {
                issues = JSON.parse(storedIssues);
            }
            
            if (storedUsers) {
                users = JSON.parse(storedUsers);
            }
            
            if (storedIssueIdCounter) {
                issueIdCounter = parseInt(storedIssueIdCounter);
            }
            
            if (storedSettings) {
                settings = { ...settings, ...JSON.parse(storedSettings) };
            }
            
            if (storedLocationPermissionAsked) {
                locationPermissionAsked = storedLocationPermissionAsked === 'true';
            }
        }
        
        // Save data to localStorage
        function saveDataToStorage() {
            localStorage.setItem('civictrack_issues', JSON.stringify(issues));
            localStorage.setItem('civictrack_users', JSON.stringify(users));
            localStorage.setItem('civictrack_issueIdCounter', issueIdCounter.toString());
            localStorage.setItem('civictrack_settings', JSON.stringify(settings));
            localStorage.setItem('civictrack_locationPermissionAsked', locationPermissionAsked.toString());
        }
        
        // Apply settings
        function applySettings() {
            // Apply default radius
            radiusSelect.value = settings.defaultRadius;
            
            // Apply auto location toggle
            if (settings.autoLocation) {
                autoLocationToggle.classList.add('active');
            } else {
                autoLocationToggle.classList.remove('active');
            }
            
            // Apply notification toggles
            if (settings.notifications.issueUpdates) {
                issueUpdatesToggle.classList.add('active');
            } else {
                issueUpdatesToggle.classList.remove('active');
            }
            
            if (settings.notifications.newIssues) {
                newIssuesToggle.classList.add('active');
            } else {
                newIssuesToggle.classList.remove('active');
            }
            
            if (settings.notifications.communityMessages) {
                communityMessagesToggle.classList.add('active');
            } else {
                communityMessagesToggle.classList.remove('active');
            }
            
            // Apply display toggles
            if (settings.display.darkMode) {
                darkModeToggle.classList.add('active');
                document.body.classList.add('dark-mode');
            } else {
                darkModeToggle.classList.remove('active');
                document.body.classList.remove('dark-mode');
            }
            
            if (settings.display.compactView) {
                compactViewToggle.classList.add('active');
                document.body.classList.add('compact-view');
            } else {
                compactViewToggle.classList.remove('active');
                document.body.classList.remove('compact-view');
            }
        }
        
        // Show location permission modal
        function showLocationPermissionModal() {
            const modal = new bootstrap.Modal(permissionModal);
            modal.show();
        }
        
        // Get user location
        function getUserLocation() {
            if (navigator.geolocation) {
                locationText.textContent = 'Getting your location...';
                
                navigator.geolocation.getCurrentPosition(
                    position => {
                        userLocation = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };
                        map.setView([userLocation.lat, userLocation.lng], 14);
                        
                        // Add user location marker
                        L.marker([userLocation.lat, userLocation.lng])
                            .addTo(map)
                            .bindPopup('Your Location')
                            .openPopup();
                        
                        locationText.textContent = `Lat: ${userLocation.lat.toFixed(4)}, Lng: ${userLocation.lng.toFixed(4)}`;
                        
                        // Filter issues based on location
                        filterIssuesByLocation();
                        renderLiveIssues();
                        
                        // Mark that we've asked for permission
                        locationPermissionAsked = true;
                        saveDataToStorage();
                    },
                    error => {
                        console.error('Error getting location:', error);
                        locationText.textContent = 'Location access denied. Set location manually.';
                        // Default to New York City
                        userLocation = { lat: 40.7128, lng: -74.0060 };
                        filterIssuesByLocation();
                        renderLiveIssues();
                    }
                );
            } else {
                locationText.textContent = 'Geolocation not supported. Set location manually.';
                userLocation = { lat: 40.7128, lng: -74.0060 };
                filterIssuesByLocation();
                renderLiveIssues();
            }
        }
        
        // Search for location
        function searchLocation() {
            const query = locationSearch.value.trim();
            if (!query) {
                showNotification('Please enter a location to search', 'warning');
                return;
            }
            
            // Use Nominatim API for geocoding
            fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=1`)
                .then(response => response.json())
                .then(data => {
                    if (data && data.length > 0) {
                        const result = data[0];
                        const lat = parseFloat(result.lat);
                        const lng = parseFloat(result.lon);
                        
                        userLocation = { lat, lng };
                        map.setView([lat, lng], 14);
                        
                        // Add location marker
                        L.marker([lat, lng])
                            .addTo(map)
                            .bindPopup(result.display_name)
                            .openPopup();
                        
                        locationText.textContent = result.display_name;
                        
                        // Filter issues based on location
                        filterIssuesByLocation();
                        renderLiveIssues();
                        
                        showNotification('Location found successfully', 'success');
                    } else {
                        showNotification('Location not found. Please try a different search term.', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error searching location:', error);
                    showNotification('Error searching for location. Please try again.', 'error');
                });
        }
        
        // Set manual location
        function setManualLocation() {
            const lat = prompt('Enter latitude:');
            const lng = prompt('Enter longitude:');
            
            if (lat && lng) {
                userLocation = {
                    lat: parseFloat(lat),
                    lng: parseFloat(lng)
                };
                
                map.setView([userLocation.lat, userLocation.lng], 14);
                
                // Add user location marker
                L.marker([userLocation.lat, userLocation.lng])
                    .addTo(map)
                    .bindPopup('Your Location')
                    .openPopup();
                
                locationText.textContent = `Lat: ${userLocation.lat.toFixed(4)}, Lng: ${userLocation.lng.toFixed(4)} (Manual)`;
                
                // Filter issues based on location
                filterIssuesByLocation();
                renderLiveIssues();
                
                showNotification('Location set manually', 'success');
            }
        }
        
        // Load sample data
        function loadSampleData() {
            issues = [
                {
                    id: 1,
                    title: 'Streetlight not working',
                    description: 'Street light not working for past week, causing safety concerns for pedestrians at night',
                    category: 'lighting',
                    status: 'in-progress',
                    location: { lat: 40.7120, lng: -74.0055 },
                    photos: ['https://picsum.photos/seed/light1/600/400.jpg', 'https://picsum.photos/seed/light2/600/400.jpg'],
                    reporter: 'Jane Smith',
                    reporterId: 2,
                    anonymous: false,
                    timestamp: new Date(Date.now() - 172800000).toISOString(),
                    flags: 1,
                    timeline: [
                        { status: 'reported', date: new Date(Date.now() - 172800000).toISOString(), note: 'Issue reported' },
                        { status: 'in-progress', date: new Date(Date.now() - 43200000).toISOString(), note: 'Maintenance team assigned' }
                    ]
                },
                {
                    id: 2,
                    title: 'Pothole on main road',
                    description: 'Large pothole causing traffic issues and potential damage to vehicles',
                    category: 'roads',
                    status: 'reported',
                    location: { lat: 40.7135, lng: -74.0072 },
                    photos: ['https://picsum.photos/seed/pothole1/600/400.jpg'],
                    reporter: 'John Doe',
                    reporterId: 1,
                    anonymous: false,
                    timestamp: new Date(Date.now() - 86400000).toISOString(),
                    flags: 0,
                    timeline: [
                        { status: 'reported', date: new Date(Date.now() - 86400000).toISOString(), note: 'Issue reported' }
                    ]
                },
                {
                    id: 3,
                    title: 'Garbage not collected',
                    description: 'Public garbage bin overflowing and attracting pests, creating health hazard',
                    category: 'cleanliness',
                    status: 'reported',
                    location: { lat: 40.7115, lng: -74.0065 },
                    photos: ['https://picsum.photos/seed/trash1/600/400.jpg'],
                    reporter: 'Mike Johnson',
                    reporterId: 3,
                    anonymous: false,
                    timestamp: new Date(Date.now() - 3600000).toISOString(),
                    flags: 2,
                    timeline: [
                        { status: 'reported', date: new Date(Date.now() - 3600000).toISOString(), note: 'Issue reported' }
                    ]
                },
                {
                    id: 4,
                    title: 'Fallen tree blocking sidewalk',
                    description: 'Large tree fell during storm and is blocking pedestrian path, forcing people onto the street',
                    category: 'obstructions',
                    status: 'in-progress',
                    location: { lat: 40.7125, lng: -74.0045 },
                    photos: ['https://picsum.photos/seed/tree1/600/400.jpg', 'https://picsum.photos/seed/tree2/600/400.jpg', 'https://picsum.photos/seed/tree3/600/400.jpg'],
                    reporter: 'Sarah Williams',
                    reporterId: 4,
                    anonymous: false,
                    timestamp: new Date(Date.now() - 7200000).toISOString(),
                    flags: 0,
                    timeline: [
                        { status: 'reported', date: new Date(Date.now() - 7200000).toISOString(), note: 'Issue reported' },
                        { status: 'in-progress', date: new Date(Date.now() - 3600000).toISOString(), note: 'Cleanup crew dispatched' }
                    ]
                },
                {
                    id: 5,
                    title: 'Water leak',
                    description: 'Significant water leak near the park, wasting water and creating slippery surfaces',
                    category: 'water',
                    status: 'resolved',
                    location: { lat: 40.7140, lng: -74.0080 },
                    photos: ['https://picsum.photos/seed/water1/600/400.jpg'],
                    reporter: 'Anonymous User',
                    reporterId: null,
                    anonymous: true,
                    timestamp: new Date(Date.now() - 259200000).toISOString(),
                    flags: 0,
                    timeline: [
                        { status: 'reported', date: new Date(Date.now() - 259200000).toISOString(), note: 'Issue reported' },
                        { status: 'in-progress', date: new Date(Date.now() - 216000000).toISOString(), note: 'Repair team dispatched' },
                        { status: 'resolved', date: new Date(Date.now() - 86400000).toISOString(), note: 'Issue resolved' }
                    ]
                }
            ];
            
            users = [
                {
                    id: 1,
                    name: 'John Doe',
                    email: 'john@example.com',
                    password: 'password123',
                    isAdmin: false,
                    banned: false,
                    joinDate: new Date(Date.now() - 604800000).toISOString()
                },
                {
                    id: 2,
                    name: 'Jane Smith',
                    email: 'jane@example.com',
                    password: 'password123',
                    isAdmin: false,
                    banned: false,
                    joinDate: new Date(Date.now() - 432000000).toISOString()
                },
                {
                    id: 3,
                    name: 'Mike Johnson',
                    email: 'mike@example.com',
                    password: 'password123',
                    isAdmin: false,
                    banned: false,
                    joinDate: new Date(Date.now() - 259200000).toISOString()
                },
                {
                    id: 4,
                    name: 'Sarah Williams',
                    email: 'sarah@example.com',
                    password: 'password123',
                    isAdmin: false,
                    banned: false,
                    joinDate: new Date(Date.now() - 172800000).toISOString()
                },
                {
                    id: 5,
                    name: 'Admin User',
                    email: 'admin@civictrack.com',
                    password: 'admin123',
                    isAdmin: true,
                    banned: false,
                    joinDate: new Date(Date.now() - 864000000).toISOString()
                }
            ];
            
            issueIdCounter = 6;
        }
        
        // Setup event listeners
        function setupEventListeners() {
            // Radius selector
            radiusSelect.addEventListener('change', () => {
                filterIssuesByLocation();
                renderLiveIssues();
            });
            
            // Location search
            searchLocationBtn.addEventListener('click', searchLocation);
            locationSearch.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    searchLocation();
                }
            });
            
            // Location buttons
            refreshLocationBtn.addEventListener('click', () => {
                if (settings.autoLocation) {
                    getUserLocation();
                    showNotification('Location refreshed', 'success');
                } else {
                    showNotification('Automatic location is disabled', 'warning');
                }
            });
            
            manualLocationBtn.addEventListener('click', setManualLocation);
            
            // Category selection
            document.querySelectorAll('.category-option').forEach(option => {
                option.addEventListener('click', function() {
                    document.querySelectorAll('.category-option').forEach(opt => opt.classList.remove('selected'));
                    this.classList.add('selected');
                    document.getElementById(`cat-${this.dataset.category}`).checked = true;
                    selectedCategory = this.dataset.category;
                });
            });
            
            // Anonymous toggle
            anonymousToggle.addEventListener('click', function() {
                this.classList.toggle('active');
                isAnonymous = !isAnonymous;
            });
            
            // Photo upload
            addPhotoBtn.addEventListener('click', () => photoInput.click());
            photoInput.addEventListener('change', handlePhotoUpload);
            
            // Remove photo buttons
            document.querySelectorAll('.remove-photo').forEach(btn => {
                btn.addEventListener('click', function() {
                    const previewNum = this.dataset.preview;
                    document.getElementById(`photoPreview${previewNum}`).style.display = 'none';
                    photoCount--;
                    updatePhotoUploadButton();
                });
            });
            
            // Report form submission
            reportForm.addEventListener('submit', handleReportSubmission);
            
            // Filter buttons
            filterBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const filterType = this.dataset.type;
                    const filterValue = this.dataset.filter;
                    
                    // Update active state for this filter type
                    document.querySelectorAll(`.filter-btn[data-type="${filterType}"]`).forEach(b => {
                        b.classList.remove('active');
                    });
                    this.classList.add('active');
                    
                    // Update active filters
                    activeFilters[filterType] = filterValue;
                    
                    // Re-render issues
                    renderIssues();
                });
            });
            
            // Notification close
            notificationClose.addEventListener('click', () => {
                notification.classList.remove('show');
            });
            
            // Permission modal
            allowLocationBtn.addEventListener('click', () => {
                const modal = bootstrap.Modal.getInstance(permissionModal);
                modal.hide();
                getUserLocation();
            });
            
            denyLocationBtn.addEventListener('click', () => {
                const modal = bootstrap.Modal.getInstance(permissionModal);
                modal.hide();
                locationPermissionAsked = true;
                saveDataToStorage();
                locationText.textContent = 'Location access denied. Set location manually.';
                userLocation = { lat: 40.7128, lng: -74.0060 };
                filterIssuesByLocation();
                renderLiveIssues();
            });
            
            // Settings modal
            settingsBtn.addEventListener('click', () => {
                const modal = new bootstrap.Modal(settingsModal);
                modal.show();
            });
            
            // Settings toggles
            autoLocationToggle.addEventListener('click', function() {
                this.classList.toggle('active');
            });
            
            issueUpdatesToggle.addEventListener('click', function() {
                this.classList.toggle('active');
            });
            
            newIssuesToggle.addEventListener('click', function() {
                this.classList.toggle('active');
            });
            
            communityMessagesToggle.addEventListener('click', function() {
                this.classList.toggle('active');
            });
            
            darkModeToggle.addEventListener('click', function() {
                this.classList.toggle('active');
            });
            
            compactViewToggle.addEventListener('click', function() {
                this.classList.toggle('active');
            });
            
            // Settings form
            cancelSettingsBtn.addEventListener('click', () => {
                const modal = bootstrap.Modal.getInstance(settingsModal);
                modal.hide();
                applySettings(); // Reset to saved settings
            });
            
            saveSettingsBtn.addEventListener('click', saveSettings);
            
            // Change password
            changePasswordBtn.addEventListener('click', handleChangePassword);
            
            // Auth modal
            loginBtn.addEventListener('click', function() {
                if (currentUser) {
                    handleLogout();
                } else {
                    currentAuthTab = 'login';
                    const modal = new bootstrap.Modal(authModal);
                    modal.show();
                }
            });
            
            signupBtn.addEventListener('click', () => {
                currentAuthTab = 'signup';
                const modal = new bootstrap.Modal(authModal);
                modal.show();
            });
            
            // Back to login link
            backToLoginLink.addEventListener('click', (e) => {
                e.preventDefault();
                document.getElementById('login-tab').click();
            });
            
            // Email login button
            emailLoginBtn.addEventListener('click', (e) => {
                e.preventDefault();
                const emailModalInstance = bootstrap.Modal.getInstance(emailModal);
                emailModalInstance.hide();
                
                const authModalInstance = new bootstrap.Modal(authModal);
                authModalInstance.show();
                document.getElementById('login-tab').click();
            });
            
            // Auth forms
            loginForm.addEventListener('submit', handleLogin);
            signupForm.addEventListener('submit', handleSignup);
            forgotForm.addEventListener('submit', handleForgotPassword);
            
            // Admin button
            adminBtn.addEventListener('click', () => {
                adminPanel.style.display = adminPanel.style.display === 'none' ? 'block' : 'none';
                if (adminPanel.style.display === 'block') {
                    updateAdminStats();
                    renderAllIssues();
                    renderUsers();
                }
            });
            
            // Refresh data button
            refreshDataBtn.addEventListener('click', () => {
                updateAdminStats();
                renderAllIssues();
                renderUsers();
                showNotification('Data refreshed successfully', 'success');
            });
            
            // Live issues refresh button
            refreshLiveIssuesBtn.addEventListener('click', () => {
                renderLiveIssues();
                showNotification('Live issues refreshed', 'success');
            });
            
            // Fetch external issues button
            fetchExternalBtn.addEventListener('click', fetchExternalIssues);
            
            // User search
            searchUserBtn.addEventListener('click', searchUsers);
            userSearchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    searchUsers();
                }
            });
        }
        
        // Generate random password
        function generateRandomPassword() {
            const chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()";
            let password = "";
            for (let i = 0; i < 10; i++) {
                password += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            return password;
        }
        
        // Handle forgot password
        function handleForgotPassword(e) {
            e.preventDefault();
            
            const email = forgotEmail.value.trim();
            
            // Find user by email
            const user = users.find(u => u.email === email && !u.banned);
            
            if (user) {
                // Generate a temporary password
                const tempPassword = generateRandomPassword();
                
                // Update user's password
                user.password = tempPassword;
                saveDataToStorage();
                
                // Show email modal with the temporary password
                emailPassword.textContent = tempPassword;
                const emailModalInstance = new bootstrap.Modal(emailModal);
                emailModalInstance.show();
                
                // Reset form
                forgotForm.reset();
            } else {
                showNotification('Email not found in our system', 'error');
            }
        }
        
        // Handle change password
        function handleChangePassword() {
            const current = currentPassword.value;
            const newPass = newPassword.value;
            const confirmPass = confirmNewPassword.value;
            
            // Validate inputs
            if (!current || !newPass || !confirmPass) {
                showNotification('Please fill in all password fields', 'error');
                return;
            }
            
            if (newPass !== confirmPass) {
                showNotification('New passwords do not match', 'error');
                return;
            }
            
            if (newPass.length < 6) {
                showNotification('Password must be at least 6 characters', 'error');
                return;
            }
            
            // Check current password
            if (current !== currentUser.password) {
                showNotification('Current password is incorrect', 'error');
                return;
            }
            
            // Update password
            currentUser.password = newPass;
            saveDataToStorage();
            
            // Clear form and show notification
            currentPassword.value = '';
            newPassword.value = '';
            confirmNewPassword.value = '';
            
            showNotification('Password changed successfully', 'success');
        }
        
        // Fetch external issues from various sources
        function fetchExternalIssues() {
            showNotification('Fetching external issues...', 'info');
            
            // Simulate fetching from external sources
            setTimeout(() => {
                // Generate sample external issues
                const sampleExternalIssues = [
                    {
                        id: `ext-${Date.now()}`,
                        title: 'Traffic signal malfunction at downtown intersection',
                        description: 'Traffic light not working properly causing traffic congestion',
                        category: 'roads',
                        status: 'reported',
                        location: { 
                            lat: userLocation.lat + (Math.random() - 0.5) * 0.01, 
                            lng: userLocation.lng + (Math.random() - 0.5) * 0.01 
                        },
                        reporter: 'External Source',
                        source: 'City 311',
                        timestamp: new Date().toISOString(),
                        flags: 0,
                        isExternal: true
                    },
                    {
                        id: `ext-${Date.now() + 1}`,
                        title: 'Broken sidewalk panel near city park',
                        description: 'Concrete panel broken creating tripping hazard for pedestrians',
                        category: 'safety',
                        status: 'reported',
                        location: { 
                            lat: userLocation.lat + (Math.random() - 0.5) * 0.01, 
                            lng: userLocation.lng + (Math.random() - 0.5) * 0.01 
                        },
                        reporter: 'External Source',
                        source: 'Community Report',
                        timestamp: new Date(Date.now() - 3600000).toISOString(),
                        flags: 0,
                        isExternal: true
                    },
                    {
                        id: `ext-${Date.now() + 2}`,
                        title: 'Overflowing public trash bin',
                        description: 'Trash bin overflowing, needs immediate attention',
                        category: 'cleanliness',
                        status: 'in-progress',
                        location: { 
                            lat: userLocation.lat + (Math.random() - 0.5) * 0.01, 
                            lng: userLocation.lng + (Math.random() - 0.5) * 0.01 
                        },
                        reporter: 'External Source',
                        source: 'Social Media',
                        timestamp: new Date(Date.now() - 7200000).toISOString(),
                        flags: 0,
                        isExternal: true
                    }
                ];
                
                // Add external issues to the main issues array
                externalIssues = [...externalIssues, ...sampleExternalIssues];
                
                // Update the live issues feed
                renderLiveIssues();
                
                showNotification(`Fetched ${sampleExternalIssues.length} external issues`, 'success');
            }, 1500);
        }
        
        // Save settings
        function saveSettings() {
            settings.defaultRadius = parseInt(defaultRadius.value);
            settings.autoLocation = autoLocationToggle.classList.contains('active');
            settings.notifications.issueUpdates = issueUpdatesToggle.classList.contains('active');
            settings.notifications.newIssues = newIssuesToggle.classList.contains('active');
            settings.notifications.communityMessages = communityMessagesToggle.classList.contains('active');
            settings.display.darkMode = darkModeToggle.classList.contains('active');
            settings.display.compactView = compactViewToggle.classList.contains('active');
            
            saveDataToStorage();
            applySettings();
            const modal = bootstrap.Modal.getInstance(settingsModal);
            modal.hide();
            
            showNotification('Settings saved successfully', 'success');
        }
        
        // Handle login
        function handleLogin(e) {
            e.preventDefault();
            
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            
            // Find user
            const user = users.find(u => u.email === email && u.password === password && !u.banned);
            
            if (user) {
                currentUser = user;
                isAdmin = user.isAdmin;
                
                // Update UI
                updateAuthUI();
                const modal = bootstrap.Modal.getInstance(authModal);
                modal.hide();
                loginForm.reset();
                
                showNotification(`Welcome back, ${user.name}!`, 'success');
            } else {
                showNotification('Invalid email or password', 'error');
            }
        }
        
        // Handle signup
        function handleSignup(e) {
            e.preventDefault();
            
            const name = document.getElementById('signupName').value;
            const email = document.getElementById('signupEmail').value;
            const password = document.getElementById('signupPassword').value;
            const confirmPassword = document.getElementById('signupConfirmPassword').value;
            
            // Validate passwords match
            if (password !== confirmPassword) {
                showNotification('Passwords do not match', 'error');
                return;
            }
            
            // Check if email already exists
            if (users.some(u => u.email === email)) {
                showNotification('Email already registered', 'error');
                return;
            }
            
            // Create new user
            const newUser = {
                id: users.length > 0 ? Math.max(...users.map(u => u.id)) + 1 : 1,
                name,
                email,
                password,
                isAdmin: false,
                banned: false,
                joinDate: new Date().toISOString()
            };
            
            users.push(newUser);
            saveDataToStorage();
            
            // Auto login
            currentUser = newUser;
            isAdmin = false;
            
            // Update UI
            updateAuthUI();
            const modal = bootstrap.Modal.getInstance(authModal);
            modal.hide();
            signupForm.reset();
            
            showNotification(`Welcome to CivicTrack, ${name}!`, 'success');
        }
        
        // Update auth UI
        function updateAuthUI() {
            if (currentUser) {
                loginBtn.innerHTML = '<i class="fas fa-sign-out-alt"></i><span>Logout</span>';
                signupBtn.style.display = 'none';
                userAvatar.textContent = currentUser.name.charAt(0).toUpperCase();
                userAvatar.style.display = 'flex';
                changePasswordSection.style.display = 'block';
                
                if (isAdmin) {
                    adminBtn.style.display = 'flex';
                } else {
                    adminBtn.style.display = 'none';
                }
            } else {
                loginBtn.innerHTML = '<i class="fas fa-sign-in-alt"></i><span>Login</span>';
                signupBtn.style.display = 'flex';
                userAvatar.style.display = 'none';
                changePasswordSection.style.display = 'none';
                adminBtn.style.display = 'none';
                adminPanel.style.display = 'none';
            }
        }
        
        // Handle logout
        function handleLogout() {
            currentUser = null;
            isAdmin = false;
            updateAuthUI();
            
            // Clear password fields
            currentPassword.value = '';
            newPassword.value = '';
            confirmNewPassword.value = '';
            
            showNotification('Logged out successfully', 'success');
        }
        
        // Handle photo upload
        function handlePhotoUpload(e) {
            if (photoCount >= 3) {
                showNotification('Maximum 3 photos allowed', 'warning');
                return;
            }
            
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(event) {
                    photoCount++;
                    const previewNum = photoCount;
                    const preview = document.getElementById(`photoPreview${previewNum}`);
                    preview.querySelector('img').src = event.target.result;
                    preview.style.display = 'flex';
                    updatePhotoUploadButton();
                };
                reader.readAsDataURL(file);
            }
            
            // Reset file input
            e.target.value = '';
        }
        
        // Update photo upload button visibility
        function updatePhotoUploadButton() {
            addPhotoBtn.style.display = photoCount >= 3 ? 'none' : 'flex';
        }
        
        // Handle report submission
        function handleReportSubmission(e) {
            e.preventDefault();
            
            if (!selectedCategory) {
                showNotification('Please select a category', 'error');
                return;
            }
            
            if (!userLocation) {
                showNotification('Unable to determine your location', 'error');
                return;
            }
            
            // Create new issue
            const newIssue = {
                id: issueIdCounter++,
                title: issueTitle.value,
                description: issueDescription.value,
                category: selectedCategory,
                status: 'reported',
                location: { ...userLocation },
                photos: [],
                reporter: isAnonymous ? 'Anonymous User' : currentUser.name,
                reporterId: isAnonymous ? null : currentUser.id,
                anonymous: isAnonymous,
                timestamp: new Date().toISOString(),
                flags: 0,
                timeline: [
                    { status: 'reported', date: new Date().toISOString(), note: 'Issue reported' }
                ]
            };
            
            // Add photos
            for (let i = 1; i <= photoCount; i++) {
                const preview = document.getElementById(`photoPreview${i}`);
                if (preview.style.display !== 'none') {
                    newIssue.photos.push(preview.querySelector('img').src);
                }
            }
            
            // Add to issues array
            issues.push(newIssue);
            saveDataToStorage();
            
            // Reset form
            reportForm.reset();
            document.querySelectorAll('.category-option').forEach(opt => opt.classList.remove('selected'));
            selectedCategory = null;
            isAnonymous = false;
            anonymousToggle.classList.remove('active');
            
            // Reset photo previews
            for (let i = 1; i <= 3; i++) {
                document.getElementById(`photoPreview${i}`).style.display = 'none';
            }
            photoCount = 0;
            updatePhotoUploadButton();
            
            // Update UI
            renderIssues();
            renderLiveIssues();
            addIssueToMap(newIssue);
            
            // Show notification
            showNotification('Issue reported successfully!', 'success');
        }
        
        // Filter issues by location
        function filterIssuesByLocation() {
            if (!userLocation) return;
            
            const radius = parseFloat(radiusSelect.value);
            
            // Clear existing markers
            markers.forEach(marker => map.removeLayer(marker));
            markers = [];
            
            // Add markers for issues within radius
            issues.forEach(issue => {
                const distance = calculateDistance(userLocation, issue.location);
                if (distance <= radius) {
                    addIssueToMap(issue);
                }
            });
            
            renderIssues();
        }
        
        // Calculate distance between two points
        function calculateDistance(point1, point2) {
            const R = 6371; // Earth's radius in km
            const dLat = (point2.lat - point1.lat) * Math.PI / 180;
            const dLng = (point2.lng - point1.lng) * Math.PI / 180;
            const a = 
                Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(point1.lat * Math.PI / 180) * Math.cos(point2.lat * Math.PI / 180) * 
                Math.sin(dLng/2) * Math.sin(dLng/2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
            return R * c; // Distance in km
        }
        
        // Add issue to map
        function addIssueToMap(issue) {
            const icon = getIssueIcon(issue.category);
            
            const marker = L.marker([issue.location.lat, issue.location.lng], { icon })
                .addTo(map)
                .bindPopup(`
                    <div>
                        <h4>${issue.title}</h4>
                        <p><strong>Category:</strong> ${getCategoryName(issue.category)}</p>
                        <p><strong>Status:</strong> ${getIssueStatus(issue.status)}</p>
                        <button class="btn btn-primary btn-sm" onclick="showIssueDetail(${issue.id})">View Details</button>
                    </div>
                `);
            
            markers.push(marker);
        }
        
        // Get issue icon
        function getIssueIcon(category) {
            const icons = {
                roads: 'fa-road',
                lighting: 'fa-lightbulb',
                water: 'fa-tint',
                cleanliness: 'fa-trash',
                safety: 'fa-hard-hat',
                obstructions: 'fa-tree'
            };
            
            return L.divIcon({
                html: `<i class="fas ${icons[category]}"></i>`,
                iconSize: [20, 20],
                className: 'issue-marker'
            });
        }
        
        // Get category name
        function getCategoryName(category) {
            const names = {
                roads: 'Roads',
                lighting: 'Lighting',
                water: 'Water Supply',
                cleanliness: 'Cleanliness',
                safety: 'Public Safety',
                obstructions: 'Obstructions'
            };
            return names[category] || category;
        }
        
        // Get issue status
        function getIssueStatus(status) {
            const statuses = {
                'reported': 'Reported',
                'in-progress': 'In Progress',
                'resolved': 'Resolved'
            };
            return statuses[status] || status;
        }
        
        // Render issues grid
        function renderIssues() {
            let filteredIssues = issues;
            
            // Filter by status
            if (activeFilters.status !== 'all') {
                filteredIssues = filteredIssues.filter(issue => issue.status === activeFilters.status);
            }
            
            // Filter by category
            if (activeFilters.category !== 'all') {
                filteredIssues = filteredIssues.filter(issue => issue.category === activeFilters.category);
            }
            
            // Filter by distance
            if (activeFilters.distance !== 'all' && userLocation) {
                const radius = parseFloat(activeFilters.distance);
                filteredIssues = filteredIssues.filter(issue => {
                    const distance = calculateDistance(userLocation, issue.location);
                    return distance <= radius;
                });
            }
            
            // Clear issues grid
            issuesGrid.innerHTML = '';
            
            if (filteredIssues.length === 0) {
                issuesGrid.innerHTML = `
                    <div class="no-issues">
                        <i class="fas fa-inbox"></i>
                        <h3>No Issues Found</h3>
                        <p>No issues match your current filters. Try adjusting your filter criteria.</p>
                    </div>
                `;
                return;
            }
            
            // Add issues to grid
            filteredIssues.forEach(issue => {
                const distance = userLocation ? calculateDistance(userLocation, issue.location).toFixed(2) : 'N/A';
                
                const issueCard = document.createElement('div');
                issueCard.className = `issue-card ${issue.category}`;
                issueCard.innerHTML = `
                    <div class="issue-image">
                        <img src="${issue.photos && issue.photos.length > 0 ? issue.photos[0] : `https://picsum.photos/seed/${issue.category}${issue.id}/600/400.jpg`}" alt="${issue.title}">
                        <div class="issue-status-badge status-${issue.status}">${getIssueStatus(issue.status)}</div>
                    </div>
                    <div class="issue-content">
                        <h3 class="issue-title">${issue.title}</h3>
                        <p class="issue-description">${issue.description}</p>
                        <div class="issue-meta">
                            <div class="issue-category">
                                <i class="fas ${getIssueIcon(issue.category).options.html.replace(/<[^>]*>/g, '')}"></i>
                                <span>${getCategoryName(issue.category)}</span>
                            </div>
                            <div class="issue-details">
                                <div class="issue-distance">
                                    <i class="fas fa-map-marker-alt"></i>
                                    <span>${distance} km</span>
                                </div>
                                <div class="issue-reporter">
                                    <i class="fas fa-user"></i>
                                    <span>By ${issue.reporter}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                issueCard.addEventListener('click', () => showIssueDetail(issue.id));
                issuesGrid.appendChild(issueCard);
            });
        }
        
        // Render live issues feed
        function renderLiveIssues() {
            if (!userLocation) {
                liveIssuesFeed.innerHTML = `
                    <div class="text-center py-3">
                        <i class="fas fa-map-marker-alt text-muted"></i>
                        <p class="text-muted mt-2">Location not available</p>
                    </div>
                `;
                return;
            }
            
            const radius = parseFloat(radiusSelect.value);
            
            // Combine local and external issues
            const allIssues = [...issues, ...externalIssues];
            
            // Filter issues within radius
            const nearbyIssues = allIssues.filter(issue => {
                const distance = calculateDistance(userLocation, issue.location);
                return distance <= radius;
            });
            
            // Sort by distance (closest first)
            nearbyIssues.sort((a, b) => {
                const distanceA = calculateDistance(userLocation, a.location);
                const distanceB = calculateDistance(userLocation, b.location);
                return distanceA - distanceB;
            });
            
            // Clear live issues feed
            liveIssuesFeed.innerHTML = '';
            
            if (nearbyIssues.length === 0) {
                liveIssuesFeed.innerHTML = `
                    <div class="text-center py-3">
                        <i class="fas fa-check-circle text-success"></i>
                        <p class="text-muted mt-2">No issues in your area</p>
                    </div>
                `;
                return;
            }
            
            // Check for new issues since last render
            const newIssues = nearbyIssues.filter(issue => {
                return !lastRenderedIssues.some(lastIssue => lastIssue.id === issue.id);
            });
            
            // Add issues to live feed
            nearbyIssues.forEach(issue => {
                const distance = calculateDistance(userLocation, issue.location).toFixed(2);
                const isNew = newIssues.some(newIssue => newIssue.id === issue.id);
                const issueTime = new Date(issue.timestamp);
                const timeDiff = Date.now() - issueTime.getTime();
                const hoursAgo = Math.floor(timeDiff / (1000 * 60 * 60));
                const minutesAgo = Math.floor(timeDiff / (1000 * 60));
                
                let timeString;
                if (hoursAgo > 0) {
                    timeString = `${hoursAgo}h ago`;
                } else if (minutesAgo > 0) {
                    timeString = `${minutesAgo}m ago`;
                } else {
                    timeString = 'Just now';
                }
                
                const liveIssueItem = document.createElement('div');
                liveIssueItem.className = `live-issue-item ${isNew ? 'live-issue-new' : ''} ${issue.isExternal ? 'live-issue-external' : ''}`;
                liveIssueItem.innerHTML = `
                    <div class="live-issue-title">${issue.title}</div>
                    <div class="live-issue-meta">
                        <div class="live-issue-category">
                            <i class="fas ${getIssueIcon(issue.category).options.html.replace(/<[^>]*>/g, '')}"></i>
                            <span>${getCategoryName(issue.category)}</span>
                        </div>
                        <div class="live-issue-distance">
                            <i class="fas fa-map-marker-alt"></i>
                            <span>${distance} km</span>
                        </div>
                    </div>
                    <div class="live-issue-status status-${issue.status}">${getIssueStatus(issue.status)}</div>
                    <div class="live-issue-time">${timeString}</div>
                    ${issue.isExternal ? `<div class="live-issue-source">Source: ${issue.source}</div>` : ''}
                    ${isNew ? '<div class="live-issue-pulse"></div>' : ''}
                `;
                
                liveIssueItem.addEventListener('click', () => {
                    if (issue.isExternal) {
                        showNotification('This is an external issue. Details are limited.', 'info');
                    } else {
                        showIssueDetail(issue.id);
                    }
                });
                
                liveIssuesFeed.appendChild(liveIssueItem);
            });
            
            // Update last rendered issues
            lastRenderedIssues = nearbyIssues;
        }
        
        // Show issue detail
        function showIssueDetail(issueId) {
            const issue = issues.find(i => i.id === issueId);
            if (!issue) return;
            
            const modal = new bootstrap.Modal(issueModal);
            modal.show();
            
            // Populate modal with issue details
            const distance = userLocation ? calculateDistance(userLocation, issue.location).toFixed(2) : 'N/A';
            
            issueDetail.innerHTML = `
                <div class="issue-photos">
                    ${issue.photos && issue.photos.length > 0 
                        ? issue.photos.map(photo => `
                            <div class="issue-photo">
                                <img src="${photo}" alt="Issue photo">
                            </div>
                        `).join('')
                        : `<div class="issue-photo">
                            <img src="https://picsum.photos/seed/${issue.category}${issue.id}/600/400.jpg" alt="Issue photo">
                        </div>`
                    }
                </div>
                <h3>${issue.title}</h3>
                <div class="issue-meta">
                    <div class="issue-category">
                        <i class="fas ${getIssueIcon(issue.category).options.html.replace(/<[^>]*>/g, '')}"></i>
                        <span>${getCategoryName(issue.category)}</span>
                    </div>
                    <div class="issue-distance">
                        <i class="fas fa-map-marker-alt"></i>
                        <span>${distance} km away</span>
                    </div>
                    <div class="issue-reporter">
                        <i class="fas fa-user"></i>
                        <span>Reported by ${issue.reporter}</span>
                    </div>
                </div>
                <div class="issue-description">${issue.description}</div>
                <div class="issue-timeline">
                    <h4>Timeline</h4>
                    ${issue.timeline.map(item => `
                        <div class="timeline-item">
                            <div class="timeline-icon">
                                <i class="fas ${getTimelineIcon(item.status)}"></i>
                            </div>
                            <div class="timeline-content">
                                <div class="timeline-date">${formatDate(item.date)}</div>
                                <div class="timeline-status">${getIssueStatus(item.status)}</div>
                                <div class="timeline-note">${item.note}</div>
                            </div>
                        </div>
                    `).join('')}
                </div>
                <div class="issue-actions">
                    ${currentUser && !isAdmin ? `
                        <button class="btn btn-flag" onclick="flagIssue(${issue.id})">
                            <i class="fas fa-flag"></i>
                            Flag Issue
                        </button>
                    ` : ''}
                    ${isAdmin ? `
                        <button class="btn btn-primary" onclick="updateIssueStatus(${issue.id}, 'in-progress')">
                            <i class="fas fa-tools"></i>
                            Mark In Progress
                        </button>
                        <button class="btn btn-success" onclick="updateIssueStatus(${issue.id}, 'resolved')">
                            <i class="fas fa-check-circle"></i>
                            Mark Resolved
                        </button>
                    ` : ''}
                </div>
            `;
        }
        
        // Get timeline icon
        function getTimelineIcon(status) {
            const icons = {
                'reported': 'fa-exclamation-circle',
                'in-progress': 'fa-tools',
                'resolved': 'fa-check-circle'
            };
            return icons[status] || 'fa-circle';
        }
        
        // Format date
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString() + ' at ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }
        
        // Flag issue
        function flagIssue(issueId) {
            const issue = issues.find(i => i.id === issueId);
            if (!issue) return;
            
            issue.flags++;
            saveDataToStorage();
            
            showNotification('Issue has been flagged for review', 'success');
            
            // Close modal
            const modal = bootstrap.Modal.getInstance(issueModal);
            modal.hide();
            
            // Update UI
            renderIssues();
            renderLiveIssues();
            
            if (adminPanel.style.display === 'block') {
                updateAdminStats();
                renderAllIssues();
            }
        }
        
        // Update issue status
        function updateIssueStatus(issueId, newStatus) {
            const issue = issues.find(i => i.id === issueId);
            if (!issue) return;
            
            issue.status = newStatus;
            issue.timeline.push({
                status: newStatus,
                date: new Date().toISOString(),
                note: `Status updated to ${getIssueStatus(newStatus)}`
            });
            
            saveDataToStorage();
            
            showNotification(`Issue status updated to ${getIssueStatus(newStatus)}`, 'success');
            
            // Close modal
            const modal = bootstrap.Modal.getInstance(issueModal);
            modal.hide();
            
            // Update UI
            renderIssues();
            renderLiveIssues();
            filterIssuesByLocation();
            
            if (adminPanel.style.display === 'block') {
                updateAdminStats();
                renderAllIssues();
            }
        }
        
        // Update admin stats
        function updateAdminStats() {
            const totalIssues = issues.length;
            const reportedIssues = issues.filter(i => i.status === 'reported').length;
            const inProgressIssues = issues.filter(i => i.status === 'in-progress').length;
            const resolvedIssues = issues.filter(i => i.status === 'resolved').length;
            const flaggedIssues = issues.filter(i => i.flags > 0).length;
            const totalUsers = users.length;
            
            document.getElementById('totalIssues').textContent = totalIssues;
            document.getElementById('reportedIssues').textContent = reportedIssues;
            document.getElementById('inProgressIssues').textContent = inProgressIssues;
            document.getElementById('resolvedIssues').textContent = resolvedIssues;
            document.getElementById('flaggedIssues').textContent = flaggedIssues;
            document.getElementById('totalUsers').textContent = totalUsers;
        }
        
        // Render all issues in admin panel
        function renderAllIssues() {
            allIssuesTable.innerHTML = '';
            
            if (issues.length === 0) {
                allIssuesTable.innerHTML = `
                    <tr>
                        <td colspan="7" class="text-center">No issues found</td>
                    </tr>
                `;
                return;
            }
            
            issues.forEach(issue => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${issue.id}</td>
                    <td>${issue.title}</td>
                    <td>${getCategoryName(issue.category)}</td>
                    <td><span class="badge bg-${getStatusColor(issue.status)}">${getIssueStatus(issue.status)}</span></td>
                    <td>${issue.reporter}</td>
                    <td>${issue.flags}</td>
                    <td>
                        <div class="admin-actions">
                            <button class="btn btn-primary btn-sm" onclick="showIssueDetail(${issue.id})">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn btn-warning btn-sm" onclick="updateIssueStatus(${issue.id}, 'in-progress')">
                                <i class="fas fa-tools"></i>
                            </button>
                            <button class="btn btn-success btn-sm" onclick="updateIssueStatus(${issue.id}, 'resolved')">
                                <i class="fas fa-check"></i>
                            </button>
                            <button class="btn btn-danger btn-sm" onclick="deleteIssue(${issue.id})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                `;
                allIssuesTable.appendChild(row);
            });
        }
        
        // Get status color for badge
        function getStatusColor(status) {
            const colors = {
                'reported': 'primary',
                'in-progress': 'warning',
                'resolved': 'success'
            };
            return colors[status] || 'secondary';
        }
        
        // Delete issue
        function deleteIssue(issueId) {
            if (!confirm('Are you sure you want to delete this issue?')) return;
            
            issues = issues.filter(i => i.id !== issueId);
            saveDataToStorage();
            
            showNotification('Issue deleted successfully', 'success');
            
            // Update UI
            renderIssues();
            renderLiveIssues();
            filterIssuesByLocation();
            
            if (adminPanel.style.display === 'block') {
                updateAdminStats();
                renderAllIssues();
            }
        }
        
        // Render users in admin panel
        function renderUsers() {
            usersList.innerHTML = '';
            
            if (users.length === 0) {
                usersList.innerHTML = `
                    <div class="text-center py-3">
                        <i class="fas fa-users text-muted"></i>
                        <p class="text-muted mt-2">No users found</p>
                    </div>
                `;
                return;
            }
            
            users.forEach(user => {
                const userCard = document.createElement('div');
                userCard.className = 'user-card';
                userCard.innerHTML = `
                    <div class="user-avatar-large">${user.name.charAt(0).toUpperCase()}</div>
                    <div class="user-info">
                        <div class="user-name">${user.name}</div>
                        <div class="user-email">${user.email}</div>
                        <div class="user-status ${user.banned ? 'banned' : ''}">
                            ${user.isAdmin ? 'Admin' : user.banned ? 'Banned' : 'Active User'}
                        </div>
                    </div>
                    <div class="admin-actions">
                        ${!user.banned ? `
                            <button class="btn btn-warning btn-sm" onclick="banUser(${user.id})">
                                <i class="fas fa-ban"></i>
                            </button>
                        ` : `
                            <button class="btn btn-success btn-sm" onclick="unbanUser(${user.id})">
                                <i class="fas fa-check"></i>
                            </button>
                        `}
                        ${!user.isAdmin ? `
                            <button class="btn btn-primary btn-sm" onclick="makeAdmin(${user.id})">
                                <i class="fas fa-user-shield"></i>
                            </button>
                        ` : `
                            <button class="btn btn-secondary btn-sm" onclick="removeAdmin(${user.id})">
                                <i class="fas fa-user"></i>
                            </button>
                        `}
                    </div>
                `;
                usersList.appendChild(userCard);
            });
        }
        
        // Search users
        function searchUsers() {
            const query = userSearchInput.value.toLowerCase().trim();
            
            if (!query) {
                renderUsers();
                return;
            }
            
            const filteredUsers = users.filter(user => 
                user.name.toLowerCase().includes(query) || 
                user.email.toLowerCase().includes(query)
            );
            
            usersList.innerHTML = '';
            
            if (filteredUsers.length === 0) {
                usersList.innerHTML = `
                    <div class="text-center py-3">
                        <i class="fas fa-search text-muted"></i>
                        <p class="text-muted mt-2">No users match your search</p>
                    </div>
                `;
                return;
            }
            
            filteredUsers.forEach(user => {
                const userCard = document.createElement('div');
                userCard.className = 'user-card';
                userCard.innerHTML = `
                    <div class="user-avatar-large">${user.name.charAt(0).toUpperCase()}</div>
                    <div class="user-info">
                        <div class="user-name">${user.name}</div>
                        <div class="user-email">${user.email}</div>
                        <div class="user-status ${user.banned ? 'banned' : ''}">
                            ${user.isAdmin ? 'Admin' : user.banned ? 'Banned' : 'Active User'}
                        </div>
                    </div>
                    <div class="admin-actions">
                        ${!user.banned ? `
                            <button class="btn btn-warning btn-sm" onclick="banUser(${user.id})">
                                <i class="fas fa-ban"></i>
                            </button>
                        ` : `
                            <button class="btn btn-success btn-sm" onclick="unbanUser(${user.id})">
                                <i class="fas fa-check"></i>
                            </button>
                        `}
                        ${!user.isAdmin ? `
                            <button class="btn btn-primary btn-sm" onclick="makeAdmin(${user.id})">
                                <i class="fas fa-user-shield"></i>
                            </button>
                        ` : `
                            <button class="btn btn-secondary btn-sm" onclick="removeAdmin(${user.id})">
                                <i class="fas fa-user"></i>
                            </button>
                        `}
                    </div>
                `;
                usersList.appendChild(userCard);
            });
        }
        
        // Ban user
        function banUser(userId) {
            const user = users.find(u => u.id === userId);
            if (!user) return;
            
            if (!confirm(`Are you sure you want to ban ${user.name}?`)) return;
            
            user.banned = true;
            saveDataToStorage();
            
            showNotification(`${user.name} has been banned`, 'success');
            
            // Update UI
            renderUsers();
        }
        
        // Unban user
        function unbanUser(userId) {
            const user = users.find(u => u.id === userId);
            if (!user) return;
            
            if (!confirm(`Are you sure you want to unban ${user.name}?`)) return;
            
            user.banned = false;
            saveDataToStorage();
            
            showNotification(`${user.name} has been unbanned`, 'success');
            
            // Update UI
            renderUsers();
        }
        
        // Make admin
        function makeAdmin(userId) {
            const user = users.find(u => u.id === userId);
            if (!user) return;
            
            if (!confirm(`Are you sure you want to make ${user.name} an admin?`)) return;
            
            user.isAdmin = true;
            saveDataToStorage();
            
            showNotification(`${user.name} is now an admin`, 'success');
            
            // Update UI
            renderUsers();
        }
        
        // Remove admin
        function removeAdmin(userId) {
            const user = users.find(u => u.id === userId);
            if (!user) return;
            
            if (!confirm(`Are you sure you want to remove admin privileges from ${user.name}?`)) return;
            
            user.isAdmin = false;
            saveDataToStorage();
            
            showNotification(`${user.name} is no longer an admin`, 'success');
            
            // Update UI
            renderUsers();
        }
        
        // Show notification
        function showNotification(message, type = 'success') {
            const notificationEl = document.getElementById('notification');
            const notificationTitle = notificationEl.querySelector('.notification-title');
            const notificationMessage = notificationEl.querySelector('.notification-message');
            const notificationIcon = notificationEl.querySelector('.notification-icon i');
            
            // Set notification content
            notificationTitle.textContent = type.charAt(0).toUpperCase() + type.slice(1);
            notificationMessage.textContent = message;
            
            // Set notification icon and color
            notificationEl.className = 'notification';
            notificationEl.classList.add(type);
            
            switch(type) {
                case 'success':
                    notificationIcon.className = 'fas fa-check-circle';
                    break;
                case 'error':
                    notificationIcon.className = 'fas fa-exclamation-circle';
                    break;
                case 'warning':
                    notificationIcon.className = 'fas fa-exclamation-triangle';
                    break;
                case 'info':
                    notificationIcon.className = 'fas fa-info-circle';
                    break;
            }
            
            // Show notification
            notificationEl.classList.add('show');
            
            // Hide notification after 5 seconds
            setTimeout(() => {
                notificationEl.classList.remove('show');
            }, 5000);
        }
        
        // Initialize the application when the DOM is fully loaded
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>